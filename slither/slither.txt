'npx hardhat compile' running
Nothing to compile

(node:57492) Warning: Accessing non-existent property 'VERSION' of module exports inside circular dependency
(Use `node --trace-warnings ...` to show where the warning was created)


Crowdsale._forwardFunds() (contracts/Auctions/Crowdsale.sol#340-342) sends eth to arbitrary user
	Dangerous calls:
	- wallet.transfer(address(this).balance) (contracts/Auctions/Crowdsale.sol#341)
LiquidityZAP.safeTransferETH(address,uint256) (contracts/Liquidity/LiquidityZAP.sol#248-251) sends eth to arbitrary user
	Dangerous calls:
	- (success) = to.call{value: value}(new bytes(0)) (contracts/Liquidity/LiquidityZAP.sol#249)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations

MISOMasterChef (contracts/Farms/MISOMasterChef.sol#27-331) contract sets array length with a user-controlled value:
	- poolInfo.push(PoolInfo(_lpToken,_allocPoint,lastRewardBlock,0)) (contracts/Farms/MISOMasterChef.sol#171-176)
MasterChef (contracts/Farms/MasterChef.sol#27-332) contract sets array length with a user-controlled value:
	- poolInfo.push(PoolInfo(_lpToken,_allocPoint,lastRewardBlock,0)) (contracts/Farms/MasterChef.sol#172-177)
POLContract (contracts/Unicrypt/POLContract.sol#6-170) contract sets array length with a user-controlled value:
	- lockedTokens.push(token) (contracts/Unicrypt/POLContract.sol#97)
POLContract (contracts/Unicrypt/POLContract.sol#6-170) contract sets array length with a user-controlled value:
	- liquidityTokenomics.epochs.push(unlock_date) (contracts/Unicrypt/POLContract.sol#105)
UniswapV2Factory (contracts/UniswapV2/UniswapV2Factory.sol#6-60) contract sets array length with a user-controlled value:
	- allPairs.push(pair) (contracts/UniswapV2/UniswapV2Factory.sol#41)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#array-length-assignment

UniswapV2Pair._update(uint256,uint256,uint112,uint112) (contracts/UniswapV2/UniswapV2Pair.sol#77-90) uses a weak PRNG: "blockTimestamp = uint32(block.timestamp % 2 ** 32) (contracts/UniswapV2/UniswapV2Pair.sol#79)" 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#weak-PRNG

Reentrancy in Crowdsale.finalize() (contracts/Auctions/Crowdsale.sol#298-321):
	External calls:
	- _deliverTokens(wallet,unsoldTokens) (contracts/Auctions/Crowdsale.sol#315)
		- (success,data) = _token.call(abi.encodeWithSelector(0xa9059cbb,_to,_amount)) (contracts/Auctions/Crowdsale.sol#395-398)
	External calls sending eth:
	- _forwardFunds() (contracts/Auctions/Crowdsale.sol#308)
		- wallet.transfer(address(this).balance) (contracts/Auctions/Crowdsale.sol#341)
	State variables written after the call(s):
	- finalized = true (contracts/Auctions/Crowdsale.sol#318)
Reentrancy in BatchAuction.finalizeAuction() (contracts/Auctions/BatchAuction.sol#92-107):
	External calls:
	- _tokenPayment(paymentCurrency,wallet,commitmentsTotal) (contracts/Auctions/BatchAuction.sol#99)
		- (success,data) = token.call(abi.encodeWithSelector(0xa9059cbb,to,amount)) (contracts/Auctions/BatchAuction.sol#190-194)
	- _tokenPayment(auctionToken,wallet,totalTokens) (contracts/Auctions/BatchAuction.sol#104)
		- (success,data) = token.call(abi.encodeWithSelector(0xa9059cbb,to,amount)) (contracts/Auctions/BatchAuction.sol#190-194)
	External calls sending eth:
	- _tokenPayment(paymentCurrency,wallet,commitmentsTotal) (contracts/Auctions/BatchAuction.sol#99)
		- _to.transfer(_amount) (contracts/Auctions/BatchAuction.sol#175)
	- _tokenPayment(auctionToken,wallet,totalTokens) (contracts/Auctions/BatchAuction.sol#104)
		- _to.transfer(_amount) (contracts/Auctions/BatchAuction.sol#175)
	State variables written after the call(s):
	- finalized = true (contracts/Auctions/BatchAuction.sol#106)
Reentrancy in DutchAuction.finalizeAuction() (contracts/Auctions/DutchAuction.sol#186-200):
	External calls:
	- _tokenPayment(paymentCurrency,wallet,commitmentsTotal) (contracts/Auctions/DutchAuction.sol#192)
		- (success,data) = token.call(abi.encodeWithSelector(0xa9059cbb,to,amount)) (contracts/Auctions/DutchAuction.sol#336-340)
	- _tokenPayment(auctionToken,wallet,totalTokens) (contracts/Auctions/DutchAuction.sol#197)
		- (success,data) = token.call(abi.encodeWithSelector(0xa9059cbb,to,amount)) (contracts/Auctions/DutchAuction.sol#336-340)
	External calls sending eth:
	- _tokenPayment(paymentCurrency,wallet,commitmentsTotal) (contracts/Auctions/DutchAuction.sol#192)
		- _to.transfer(_amount) (contracts/Auctions/DutchAuction.sol#319)
	- _tokenPayment(auctionToken,wallet,totalTokens) (contracts/Auctions/DutchAuction.sol#197)
		- _to.transfer(_amount) (contracts/Auctions/DutchAuction.sol#319)
	State variables written after the call(s):
	- finalized = true (contracts/Auctions/DutchAuction.sol#199)
Reentrancy in Crowdsale.withdrawTokens(address) (contracts/Auctions/Crowdsale.sol#265-281):
	External calls:
	- _deliverTokens(beneficiary,tokenAmount) (contracts/Auctions/Crowdsale.sol#275)
		- (success,data) = _token.call(abi.encodeWithSelector(0xa9059cbb,_to,_amount)) (contracts/Auctions/Crowdsale.sol#395-398)
	External calls sending eth:
	- beneficiary.transfer(claimAmount) (contracts/Auctions/Crowdsale.sol#278)
	State variables written after the call(s):
	- balances[beneficiary] = 0 (contracts/Auctions/Crowdsale.sol#280)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

MISOFermenter.initialised (contracts/MISOFermenter.sol#12) shadows:
	- Owned.initialised (contracts/Utils/Owned.sol#8)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variable-shadowing

MISOMasterChef.devPercentage (contracts/Farms/MISOMasterChef.sol#62) is never initialized. It is used in:
	- MISOMasterChef.updatePool(uint256) (contracts/Farms/MISOMasterChef.sol#229-246)
MasterChef.devPercentage (contracts/Farms/MasterChef.sol#64) is never initialized. It is used in:
	- MasterChef.updatePool(uint256) (contracts/Farms/MasterChef.sol#230-247)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-state-variables

MISOMasterChef.pendingRewards(uint256,address) (contracts/Farms/MISOMasterChef.sol#207-218) performs a multiplication on the result of a division:
	-rewardsAccum = multiplier.mul(rewardsPerBlock).mul(pool.allocPoint).div(totalAllocPoint) (contracts/Farms/MISOMasterChef.sol#214)
	-accRewardsPerShare = accRewardsPerShare.add(rewardsAccum.mul(1e12).div(lpSupply)) (contracts/Farms/MISOMasterChef.sol#215)
MISOMasterChef.updatePool(uint256) (contracts/Farms/MISOMasterChef.sol#229-246) performs a multiplication on the result of a division:
	-rewardsAccum = multiplier.mul(rewardsPerBlock).mul(pool.allocPoint).div(totalAllocPoint) (contracts/Farms/MISOMasterChef.sol#240)
	-pool.accRewardsPerShare = pool.accRewardsPerShare.add(rewardsAccum.mul(1e12).div(lpSupply)) (contracts/Farms/MISOMasterChef.sol#244)
MISOMasterChef.updatePool(uint256) (contracts/Farms/MISOMasterChef.sol#229-246) performs a multiplication on the result of a division:
	-rewardsAccum = multiplier.mul(rewardsPerBlock).mul(pool.allocPoint).div(totalAllocPoint) (contracts/Farms/MISOMasterChef.sol#240)
	-tips = tips.add(rewardsAccum.mul(devPercentage).div(1000)) (contracts/Farms/MISOMasterChef.sol#242)
MasterChef.pendingRewards(uint256,address) (contracts/Farms/MasterChef.sol#208-219) performs a multiplication on the result of a division:
	-rewardsAccum = multiplier.mul(rewardsPerBlock).mul(pool.allocPoint).div(totalAllocPoint) (contracts/Farms/MasterChef.sol#215)
	-accRewardsPerShare = accRewardsPerShare.add(rewardsAccum.mul(1e12).div(lpSupply)) (contracts/Farms/MasterChef.sol#216)
MasterChef.updatePool(uint256) (contracts/Farms/MasterChef.sol#230-247) performs a multiplication on the result of a division:
	-rewardsAccum = multiplier.mul(rewardsPerBlock).mul(pool.allocPoint).div(totalAllocPoint) (contracts/Farms/MasterChef.sol#241)
	-pool.accRewardsPerShare = pool.accRewardsPerShare.add(rewardsAccum.mul(1e12).div(lpSupply)) (contracts/Farms/MasterChef.sol#245)
MasterChef.updatePool(uint256) (contracts/Farms/MasterChef.sol#230-247) performs a multiplication on the result of a division:
	-rewardsAccum = multiplier.mul(rewardsPerBlock).mul(pool.allocPoint).div(totalAllocPoint) (contracts/Farms/MasterChef.sol#241)
	-tips = tips.add(rewardsAccum.mul(devPercentage).div(1000)) (contracts/Farms/MasterChef.sol#243)
LiquidityZAP.getLPTokenPerEthUnit(uint256) (contracts/Liquidity/LiquidityZAP.sol#211-220) performs a multiplication on the result of a division:
	-liquidity = SafeMathPlus.min(amount0.mul(_totalSupply) / _reserve0,amount1.mul(_totalSupply) / _reserve1) (contracts/Liquidity/LiquidityZAP.sol#219)
	-(amount0,amount1) = (outTokens,ethAmt.div(2)) (contracts/Liquidity/LiquidityZAP.sol#217)
PoolLiquidity.getLPTokenPerEthUnit(uint256) (contracts/Liquidity/PoolLiquidity.sol#196-205) performs a multiplication on the result of a division:
	-liquidity = SafeMathPlus.min(amount0.mul(_totalSupply) / _reserve0,amount1.mul(_totalSupply) / _reserve1) (contracts/Liquidity/PoolLiquidity.sol#204)
	-(amount0,amount1) = (outTokens,ethAmt.div(2)) (contracts/Liquidity/PoolLiquidity.sol#202)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

Crowdsale._safeTransfer(address,address,uint256) (contracts/Auctions/Crowdsale.sol#393-400) uses a dangerous strict equality:
	- require(bool)(success && (data.length == 0 || abi.decode(data,(bool)))) (contracts/Auctions/Crowdsale.sol#399)
DutchAuction._safeTransfer(address,address,uint256) (contracts/Auctions/DutchAuction.sol#330-342) uses a dangerous strict equality:
	- require(bool)(success && (data.length == 0 || abi.decode(data,(bool)))) (contracts/Auctions/DutchAuction.sol#341)
MISOMasterChef.updatePool(uint256) (contracts/Farms/MISOMasterChef.sol#229-246) uses a dangerous strict equality:
	- lpSupply == 0 (contracts/Farms/MISOMasterChef.sol#235)
MasterChef.updatePool(uint256) (contracts/Farms/MasterChef.sol#230-247) uses a dangerous strict equality:
	- lpSupply == 0 (contracts/Farms/MasterChef.sol#236)
LiquidityZAP.safeTransfer(address,address,uint256) (contracts/Liquidity/LiquidityZAP.sol#236-240) uses a dangerous strict equality:
	- require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper: TRANSFER_FAILED) (contracts/Liquidity/LiquidityZAP.sol#239)
PoolLiquidity.launchLiquidityPool() (contracts/Liquidity/PoolLiquidity.sol#100-134) uses a dangerous strict equality:
	- tokenAmount == 0 || wethAmount == 0 (contracts/Liquidity/PoolLiquidity.sol#124)
SushiToken._writeCheckpoint(address,uint32,uint256,uint256) (contracts/Tokens/SushiToken.sol#262-280) uses a dangerous strict equality:
	- nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber (contracts/Tokens/SushiToken.sol#272)
UniswapV2Pair._safeTransfer(address,address,uint256) (contracts/UniswapV2/UniswapV2Pair.sol#48-51) uses a dangerous strict equality:
	- require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),UniswapV2: TRANSFER_FAILED) (contracts/UniswapV2/UniswapV2Pair.sol#50)
UniswapV2Pair.mint(address) (contracts/UniswapV2/UniswapV2Pair.sol#114-142) uses a dangerous strict equality:
	- _totalSupply == 0 (contracts/UniswapV2/UniswapV2Pair.sol#123)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Contract locking ether found in :
	Contract POLContract (contracts/Unicrypt/POLContract.sol#6-170) has payable functions:
	 - POLContract.receive() (contracts/Unicrypt/POLContract.sol#57-59)
	 - POLContract.depositTokenMultipleEpochs(address,uint256[],uint256[]) (contracts/Unicrypt/POLContract.sol#79-84)
	 - POLContract.depositToken(address,uint256,uint256) (contracts/Unicrypt/POLContract.sol#86-114)
	But does not have a function to withdraw the ether
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#contracts-that-lock-ether

Reentrancy in UniswapV2Pair.burn(address) (contracts/UniswapV2/UniswapV2Pair.sol#145-167):
	External calls:
	- _safeTransfer(_token0,to,amount0) (contracts/UniswapV2/UniswapV2Pair.sol#159)
		- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (contracts/UniswapV2/UniswapV2Pair.sol#49)
	- _safeTransfer(_token1,to,amount1) (contracts/UniswapV2/UniswapV2Pair.sol#160)
		- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (contracts/UniswapV2/UniswapV2Pair.sol#49)
	State variables written after the call(s):
	- _update(balance0,balance1,_reserve0,_reserve1) (contracts/UniswapV2/UniswapV2Pair.sol#164)
		- blockTimestampLast = blockTimestamp (contracts/UniswapV2/UniswapV2Pair.sol#88)
	- kLast = uint256(reserve0).mul(reserve1) (contracts/UniswapV2/UniswapV2Pair.sol#165)
	- _update(balance0,balance1,_reserve0,_reserve1) (contracts/UniswapV2/UniswapV2Pair.sol#164)
		- reserve0 = uint112(balance0) (contracts/UniswapV2/UniswapV2Pair.sol#86)
	- _update(balance0,balance1,_reserve0,_reserve1) (contracts/UniswapV2/UniswapV2Pair.sol#164)
		- reserve1 = uint112(balance1) (contracts/UniswapV2/UniswapV2Pair.sol#87)
Reentrancy in Crowdsale.buyTokens(address,uint256) (contracts/Auctions/Crowdsale.sol#199-204):
	External calls:
	- _safeTransferFrom(paymentCurrency,msg.sender,_tokenAmount) (contracts/Auctions/Crowdsale.sol#202)
		- (success,data) = _token.call(abi.encodeWithSelector(0x23b872dd,_from,address(this),_amount)) (contracts/Auctions/Crowdsale.sol#405-408)
	State variables written after the call(s):
	- _processBuy(_beneficiary,_tokenAmount) (contracts/Auctions/Crowdsale.sol#203)
		- amountRaised = amountRaised.add(amount) (contracts/Auctions/Crowdsale.sol#216)
Reentrancy in DutchAuction.commitTokensFrom(address,uint256) (contracts/Auctions/DutchAuction.sol#166-176):
	External calls:
	- _safeTransferFrom(paymentCurrency,_from,_amount) (contracts/Auctions/DutchAuction.sol#173)
		- (success,data) = token.call(abi.encodeWithSelector(0x23b872dd,from,address(this),amount)) (contracts/Auctions/DutchAuction.sol#350-354)
	State variables written after the call(s):
	- _addCommitment(_from,tokensToTransfer) (contracts/Auctions/DutchAuction.sol#174)
		- commitmentsTotal = commitmentsTotal.add(_commitment) (contracts/Auctions/DutchAuction.sol#304)
Reentrancy in UniswapV2Factory.createPair(address,address) (contracts/UniswapV2/UniswapV2Factory.sol#28-43):
	External calls:
	- UniswapV2Pair(pair).initialize(token0,token1) (contracts/UniswapV2/UniswapV2Factory.sol#38)
	State variables written after the call(s):
	- getPair[token0][token1] = pair (contracts/UniswapV2/UniswapV2Factory.sol#39)
	- getPair[token1][token0] = pair (contracts/UniswapV2/UniswapV2Factory.sol#40)
Reentrancy in MISOMasterChef.deposit(uint256,uint256) (contracts/Farms/MISOMasterChef.sol#249-265):
	External calls:
	- safeRewardsTransfer(msg.sender,pending) (contracts/Farms/MISOMasterChef.sol#256)
		- rewards.transfer(_to,rewardsBal) (contracts/Farms/MISOMasterChef.sol#300)
		- rewards.transfer(_to,_amount) (contracts/Farms/MISOMasterChef.sol#302)
	- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (contracts/Farms/MISOMasterChef.sol#260)
	State variables written after the call(s):
	- user.amount = user.amount.add(_amount) (contracts/Farms/MISOMasterChef.sol#261)
	- user.rewardDebt = user.amount.mul(pool.accRewardsPerShare).div(1e12) (contracts/Farms/MISOMasterChef.sol#263)
Reentrancy in MasterChef.deposit(uint256,uint256) (contracts/Farms/MasterChef.sol#250-266):
	External calls:
	- safeRewardsTransfer(msg.sender,pending) (contracts/Farms/MasterChef.sol#257)
		- rewards.transfer(_to,rewardsBal) (contracts/Farms/MasterChef.sol#301)
		- rewards.transfer(_to,_amount) (contracts/Farms/MasterChef.sol#303)
	- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (contracts/Farms/MasterChef.sol#261)
	State variables written after the call(s):
	- user.amount = user.amount.add(_amount) (contracts/Farms/MasterChef.sol#262)
	- user.rewardDebt = user.amount.mul(pool.accRewardsPerShare).div(1e12) (contracts/Farms/MasterChef.sol#264)
Reentrancy in TokenVault.deposit(address,uint256,address) (contracts/Vault/TokenVault.sol#69-77):
	External calls:
	- pool.token.transferFrom(address(msg.sender),address(this),_amount) (contracts/Vault/TokenVault.sol#74)
	State variables written after the call(s):
	- user.amount = user.amount.add(_amount) (contracts/Vault/TokenVault.sol#75)
Reentrancy in BatchAuction.initAuction(address,address,uint256,uint256,uint256,address,uint256,address) (contracts/Auctions/BatchAuction.sol#27-50):
	External calls:
	- _safeTransferFrom(auctionToken,_funder,_totalTokens) (contracts/Auctions/BatchAuction.sol#48)
		- (success,data) = token.call(abi.encodeWithSelector(0x23b872dd,from,address(this),amount)) (contracts/Auctions/BatchAuction.sol#204-208)
	State variables written after the call(s):
	- initialized = true (contracts/Auctions/BatchAuction.sol#49)
Reentrancy in DutchAuction.initAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address) (contracts/Auctions/DutchAuction.sol#44-75):
	External calls:
	- _safeTransferFrom(auctionToken,_funder,_totalTokens) (contracts/Auctions/DutchAuction.sol#73)
		- (success,data) = token.call(abi.encodeWithSelector(0x23b872dd,from,address(this),amount)) (contracts/Auctions/DutchAuction.sol#350-354)
	State variables written after the call(s):
	- initialized = true (contracts/Auctions/DutchAuction.sol#74)
Reentrancy in Crowdsale.initCrowdsale(address,address,address,uint256,uint256,uint256,uint256,uint256,address) (contracts/Auctions/Crowdsale.sol#87-121):
	External calls:
	- _safeTransferFrom(_token,_funder,_totalTokens) (contracts/Auctions/Crowdsale.sol#118)
		- (success,data) = _token.call(abi.encodeWithSelector(0x23b872dd,_from,address(this),_amount)) (contracts/Auctions/Crowdsale.sol#405-408)
	State variables written after the call(s):
	- initialized = true (contracts/Auctions/Crowdsale.sol#119)
Reentrancy in PoolLiquidity.initPoolLiquidity(address,address,address,address,address,address,uint256,uint256,uint256) (contracts/Liquidity/PoolLiquidity.sol#49-77):
	External calls:
	- _setTokenPair() (contracts/Liquidity/PoolLiquidity.sol#69)
		- tokenWETHPair = factory.createPair(address(token),address(WETH)) (contracts/Liquidity/PoolLiquidity.sol#178)
	State variables written after the call(s):
	- initialised = true (contracts/Liquidity/PoolLiquidity.sol#70)
Reentrancy in UniswapV2Pair.swap(uint256,uint256,address,bytes) (contracts/UniswapV2/UniswapV2Pair.sol#170-198):
	External calls:
	- _safeTransfer(_token0,to,amount0Out) (contracts/UniswapV2/UniswapV2Pair.sol#181)
		- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (contracts/UniswapV2/UniswapV2Pair.sol#49)
	- _safeTransfer(_token1,to,amount1Out) (contracts/UniswapV2/UniswapV2Pair.sol#182)
		- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (contracts/UniswapV2/UniswapV2Pair.sol#49)
	- IUniswapV2Callee(to).uniswapV2Call(msg.sender,amount0Out,amount1Out,data) (contracts/UniswapV2/UniswapV2Pair.sol#183)
	State variables written after the call(s):
	- _update(balance0,balance1,_reserve0,_reserve1) (contracts/UniswapV2/UniswapV2Pair.sol#196)
		- blockTimestampLast = blockTimestamp (contracts/UniswapV2/UniswapV2Pair.sol#88)
	- _update(balance0,balance1,_reserve0,_reserve1) (contracts/UniswapV2/UniswapV2Pair.sol#196)
		- reserve0 = uint112(balance0) (contracts/UniswapV2/UniswapV2Pair.sol#86)
	- _update(balance0,balance1,_reserve0,_reserve1) (contracts/UniswapV2/UniswapV2Pair.sol#196)
		- reserve1 = uint112(balance1) (contracts/UniswapV2/UniswapV2Pair.sol#87)
Reentrancy in MISOMasterChef.withdraw(uint256,uint256) (contracts/Farms/MISOMasterChef.sol#268-283):
	External calls:
	- safeRewardsTransfer(msg.sender,pending) (contracts/Farms/MISOMasterChef.sol#275)
		- rewards.transfer(_to,rewardsBal) (contracts/Farms/MISOMasterChef.sol#300)
		- rewards.transfer(_to,_amount) (contracts/Farms/MISOMasterChef.sol#302)
	State variables written after the call(s):
	- user.amount = user.amount.sub(_amount) (contracts/Farms/MISOMasterChef.sol#278)
Reentrancy in MISOMasterChef.withdraw(uint256,uint256) (contracts/Farms/MISOMasterChef.sol#268-283):
	External calls:
	- safeRewardsTransfer(msg.sender,pending) (contracts/Farms/MISOMasterChef.sol#275)
		- rewards.transfer(_to,rewardsBal) (contracts/Farms/MISOMasterChef.sol#300)
		- rewards.transfer(_to,_amount) (contracts/Farms/MISOMasterChef.sol#302)
	- pool.lpToken.safeTransfer(address(msg.sender),_amount) (contracts/Farms/MISOMasterChef.sol#279)
	State variables written after the call(s):
	- user.rewardDebt = user.amount.mul(pool.accRewardsPerShare).div(1e12) (contracts/Farms/MISOMasterChef.sol#281)
Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/Farms/MasterChef.sol#269-284):
	External calls:
	- safeRewardsTransfer(msg.sender,pending) (contracts/Farms/MasterChef.sol#276)
		- rewards.transfer(_to,rewardsBal) (contracts/Farms/MasterChef.sol#301)
		- rewards.transfer(_to,_amount) (contracts/Farms/MasterChef.sol#303)
	State variables written after the call(s):
	- user.amount = user.amount.sub(_amount) (contracts/Farms/MasterChef.sol#279)
Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/Farms/MasterChef.sol#269-284):
	External calls:
	- safeRewardsTransfer(msg.sender,pending) (contracts/Farms/MasterChef.sol#276)
		- rewards.transfer(_to,rewardsBal) (contracts/Farms/MasterChef.sol#301)
		- rewards.transfer(_to,_amount) (contracts/Farms/MasterChef.sol#303)
	- pool.lpToken.safeTransfer(address(msg.sender),_amount) (contracts/Farms/MasterChef.sol#280)
	State variables written after the call(s):
	- user.rewardDebt = user.amount.mul(pool.accRewardsPerShare).div(1e12) (contracts/Farms/MasterChef.sol#282)
Reentrancy in TokenLock.withdrawTokens(uint256) (contracts/Vault/TokenLock.sol#53-77):
	External calls:
	- require(bool,string)(IERC20(lockedToken[_id].tokenAddress).transfer(msg.sender,lockedToken[_id].tokenAmount),Transfer of tokens failed) (contracts/Vault/TokenLock.sol#57)
	State variables written after the call(s):
	- lockedToken[_id].withdrawn = true (contracts/Vault/TokenLock.sol#59)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

UniswapV2Router02._swapSupportingFeeOnTransferTokens(address[],address).i (contracts/UniswapV2/UniswapV2Router02.sol#322) is a local variable never initialized
UniswapV2Router02._swap(uint256[],address[],address).i (contracts/UniswapV2/UniswapV2Router02.sol#213) is a local variable never initialized
UniswapV2Library.getAmountsOut(address,uint256,address[]).i (contracts/UniswapV2/UniswapV2Library.sol#66) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables

MISOMasterChef.safeRewardsTransfer(address,uint256) (contracts/Farms/MISOMasterChef.sol#297-304) ignores return value by rewards.transfer(_to,rewardsBal) (contracts/Farms/MISOMasterChef.sol#300)
MISOMasterChef.safeRewardsTransfer(address,uint256) (contracts/Farms/MISOMasterChef.sol#297-304) ignores return value by rewards.transfer(_to,_amount) (contracts/Farms/MISOMasterChef.sol#302)
MasterChef.safeRewardsTransfer(address,uint256) (contracts/Farms/MasterChef.sol#298-305) ignores return value by rewards.transfer(_to,rewardsBal) (contracts/Farms/MasterChef.sol#301)
MasterChef.safeRewardsTransfer(address,uint256) (contracts/Farms/MasterChef.sol#298-305) ignores return value by rewards.transfer(_to,_amount) (contracts/Farms/MasterChef.sol#303)
LiquidityZAP.addLiquidityETHOnly(address) (contracts/Liquidity/LiquidityZAP.sol#105-122) ignores return value by _WETH.transfer(_tokenWETHPair,buyAmount) (contracts/Liquidity/LiquidityZAP.sol#115)
LiquidityZAP._addLiquidity(uint256,uint256,address) (contracts/Liquidity/LiquidityZAP.sol#124-151) ignores return value by IERC20(_token).transfer(to,tokenAmount.sub(optimalTokenAmount)) (contracts/Liquidity/LiquidityZAP.sol#144)
LiquidityZAP.removeLiquidity(address,address,uint256,address) (contracts/Liquidity/LiquidityZAP.sol#154-164) ignores return value by IUniswapV2Pair(_tokenWETHPair).transferFrom(msg.sender,_tokenWETHPair,liquidity) (contracts/Liquidity/LiquidityZAP.sol#160)
LiquidityZAP.removeLiquidityTokenOnly(address,uint256) (contracts/Liquidity/LiquidityZAP.sol#189-202) ignores return value by _WETH.transfer(_tokenWETHPair,amountETH) (contracts/Liquidity/LiquidityZAP.sol#196)
PoolLiquidity.depositTokens(uint256) (contracts/Liquidity/PoolLiquidity.sol#93-98) ignores return value by token.transferFrom(msg.sender,address(this),amount) (contracts/Liquidity/PoolLiquidity.sol#97)
PoolLiquidity.withdrawLPTokens() (contracts/Liquidity/PoolLiquidity.sol#136-146) ignores return value by IERC20(tokenWETHPair).transfer(wallet,liquidity) (contracts/Liquidity/PoolLiquidity.sol#145)
MISOTokenFactory.createToken(uint256,bytes) (contracts/MISOTokenFactory.sol#127-141) ignores return value by IERC20(token).transfer(msg.sender,initialTokens) (contracts/MISOTokenFactory.sol#139)
MISORecipe01.prepareMiso(string,string,address) (contracts/Recipes/MISORecipe01.sol#116-198) ignores return value by token.approve(address(misoMarket),tokensToMarket) (contracts/Recipes/MISORecipe01.sol#128)
MISORecipe01.prepareMiso(string,string,address) (contracts/Recipes/MISORecipe01.sol#116-198) ignores return value by token.transfer(address(poolLiquidity),tokensToLiquidity) (contracts/Recipes/MISORecipe01.sol#174)
MISORecipe01.prepareMiso(string,string,address) (contracts/Recipes/MISORecipe01.sol#116-198) ignores return value by token.transfer(address(farm),tokensToFarm) (contracts/Recipes/MISORecipe01.sol#191)
UniswapV2Router02._addLiquidity(address,address,uint256,uint256,uint256,uint256) (contracts/UniswapV2/UniswapV2Router02.sol#33-60) ignores return value by IUniswapV2Factory(factory).createPair(tokenA,tokenB) (contracts/UniswapV2/UniswapV2Router02.sol#43)
UniswapV2Router02.removeLiquidity(address,address,uint256,uint256,uint256,address,uint256) (contracts/UniswapV2/UniswapV2Router02.sol#103-119) ignores return value by IUniswapV2Pair(pair).transferFrom(msg.sender,pair,liquidity) (contracts/UniswapV2/UniswapV2Router02.sol#113)
TokenVault.deposit(address,uint256,address) (contracts/Vault/TokenVault.sol#69-77) ignores return value by pool.token.transferFrom(address(msg.sender),address(this),_amount) (contracts/Vault/TokenVault.sol#74)
TokenVault.withdraw(uint256,uint256) (contracts/Vault/TokenVault.sol#79-88) ignores return value by pool.token.transfer(address(msg.sender),_amount) (contracts/Vault/TokenVault.sol#86)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

ERC20._initERC20(string,string).name (contracts/Tokens/ERC20.sol#59) shadows:
	- ERC20.name() (contracts/Tokens/ERC20.sol#70-72) (function)
ERC20._initERC20(string,string).symbol (contracts/Tokens/ERC20.sol#59) shadows:
	- ERC20.symbol() (contracts/Tokens/ERC20.sol#78-80) (function)
FixedToken.initToken(string,string,address,uint256)._name (contracts/Tokens/FixedToken.sol#10) shadows:
	- ERC20._name (contracts/Tokens/ERC20.sol#45) (state variable)
FixedToken.initToken(string,string,address,uint256)._symbol (contracts/Tokens/FixedToken.sol#10) shadows:
	- ERC20._symbol (contracts/Tokens/ERC20.sol#46) (state variable)
FixedToken.initToken(bytes)._name (contracts/Tokens/FixedToken.sol#18) shadows:
	- ERC20._name (contracts/Tokens/ERC20.sol#45) (state variable)
FixedToken.initToken(bytes)._symbol (contracts/Tokens/FixedToken.sol#19) shadows:
	- ERC20._symbol (contracts/Tokens/ERC20.sol#46) (state variable)
FixedToken.getInitData(string,string,address,uint256)._name (contracts/Tokens/FixedToken.sol#34) shadows:
	- ERC20._name (contracts/Tokens/ERC20.sol#45) (state variable)
FixedToken.getInitData(string,string,address,uint256)._symbol (contracts/Tokens/FixedToken.sol#35) shadows:
	- ERC20._symbol (contracts/Tokens/ERC20.sol#46) (state variable)
MintableToken.initToken(string,string,address,uint256)._name (contracts/Tokens/MintableToken.sol#13) shadows:
	- ERC20._name (contracts/Tokens/ERC20.sol#45) (state variable)
MintableToken.initToken(string,string,address,uint256)._symbol (contracts/Tokens/MintableToken.sol#13) shadows:
	- ERC20._symbol (contracts/Tokens/ERC20.sol#46) (state variable)
MintableToken.initToken(bytes)._name (contracts/Tokens/MintableToken.sol#24) shadows:
	- ERC20._name (contracts/Tokens/ERC20.sol#45) (state variable)
MintableToken.initToken(bytes)._symbol (contracts/Tokens/MintableToken.sol#25) shadows:
	- ERC20._symbol (contracts/Tokens/ERC20.sol#46) (state variable)
MintableToken.getInitData(string,string,address,uint256)._name (contracts/Tokens/MintableToken.sol#40) shadows:
	- ERC20._name (contracts/Tokens/ERC20.sol#45) (state variable)
MintableToken.getInitData(string,string,address,uint256)._symbol (contracts/Tokens/MintableToken.sol#41) shadows:
	- ERC20._symbol (contracts/Tokens/ERC20.sol#46) (state variable)
SushiToken.initToken(string,string,address,uint256)._name (contracts/Tokens/SushiToken.sol#16) shadows:
	- ERC20._name (contracts/Tokens/ERC20.sol#45) (state variable)
SushiToken.initToken(string,string,address,uint256)._symbol (contracts/Tokens/SushiToken.sol#16) shadows:
	- ERC20._symbol (contracts/Tokens/ERC20.sol#46) (state variable)
SushiToken.initToken(bytes)._name (contracts/Tokens/SushiToken.sol#27) shadows:
	- ERC20._name (contracts/Tokens/ERC20.sol#45) (state variable)
SushiToken.initToken(bytes)._symbol (contracts/Tokens/SushiToken.sol#28) shadows:
	- ERC20._symbol (contracts/Tokens/ERC20.sol#46) (state variable)
SushiToken.getInitData(string,string,address,uint256)._name (contracts/Tokens/SushiToken.sol#43) shadows:
	- ERC20._name (contracts/Tokens/ERC20.sol#45) (state variable)
SushiToken.getInitData(string,string,address,uint256)._symbol (contracts/Tokens/SushiToken.sol#44) shadows:
	- ERC20._symbol (contracts/Tokens/ERC20.sol#46) (state variable)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

WhiteListFactory.initWhiteListFactory(address,uint256) (contracts/Access/WhiteListFactory.sol#34-38) should emit an event for: 
	- minimumFee = _minimumFee (contracts/Access/WhiteListFactory.sol#37) 
MISOMasterChef.setBonus(uint256,uint256) (contracts/Farms/MISOMasterChef.sol#142-153) should emit an event for: 
	- bonusEndBlock = _bonusEndBlock (contracts/Farms/MISOMasterChef.sol#151) 
	- bonusMultiplier = _bonusMultiplier (contracts/Farms/MISOMasterChef.sol#152) 
MISOMasterChef.addToken(uint256,IERC20,bool) (contracts/Farms/MISOMasterChef.sol#161-177) should emit an event for: 
	- totalAllocPoint = totalAllocPoint.add(_allocPoint) (contracts/Farms/MISOMasterChef.sol#170) 
MISOMasterChef.set(uint256,uint256,bool) (contracts/Farms/MISOMasterChef.sol#180-190) should emit an event for: 
	- totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint) (contracts/Farms/MISOMasterChef.sol#188) 
POLContract.updateFee(uint256,uint256) (contracts/Unicrypt/POLContract.sol#66-69) should emit an event for: 
	- feeNumerator = numerator (contracts/Unicrypt/POLContract.sol#67) 
	- feeDenominator = denominator (contracts/Unicrypt/POLContract.sol#68) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

MISOAccessFactory.setDev(address)._devaddr (contracts/Access/MISOAccessFactory.sol#95) lacks a zero-check on :
		- devaddr = _devaddr (contracts/Access/MISOAccessFactory.sol#101)
Owned.transferOwnership(address)._newOwner (contracts/Utils/Owned.sol#32) lacks a zero-check on :
		- newOwner = _newOwner (contracts/Utils/Owned.sol#34)
WhiteListFactory.initWhiteListFactory(address,uint256)._whiteListTemplate (contracts/Access/WhiteListFactory.sol#34) lacks a zero-check on :
		- whiteListTemplate = _whiteListTemplate (contracts/Access/WhiteListFactory.sol#36)
WhiteListFactory.deprecateFactory(address)._newAddress (contracts/Access/WhiteListFactory.sol#43) lacks a zero-check on :
		- newAddress = _newAddress (contracts/Access/WhiteListFactory.sol#47)
BatchAuction.initAuction(address,address,uint256,uint256,uint256,address,uint256,address)._token (contracts/Auctions/BatchAuction.sol#29) lacks a zero-check on :
		- auctionToken = _token (contracts/Auctions/BatchAuction.sol#39)
BatchAuction.initAuction(address,address,uint256,uint256,uint256,address,uint256,address)._paymentCurrency (contracts/Auctions/BatchAuction.sol#33) lacks a zero-check on :
		- paymentCurrency = _paymentCurrency (contracts/Auctions/BatchAuction.sol#40)
BatchAuction.initAuction(address,address,uint256,uint256,uint256,address,uint256,address)._wallet (contracts/Auctions/BatchAuction.sol#35) lacks a zero-check on :
		- wallet = _wallet (contracts/Auctions/BatchAuction.sol#45)
Crowdsale.initCrowdsale(address,address,address,uint256,uint256,uint256,uint256,uint256,address)._paymentCurrency (contracts/Auctions/Crowdsale.sol#90) lacks a zero-check on :
		- paymentCurrency = _paymentCurrency (contracts/Auctions/Crowdsale.sol#112)
Crowdsale.withdrawTokens(address).beneficiary (contracts/Auctions/Crowdsale.sol#265) lacks a zero-check on :
		- beneficiary.transfer(claimAmount) (contracts/Auctions/Crowdsale.sol#278)
DutchAuction.initAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address)._token (contracts/Auctions/DutchAuction.sol#46) lacks a zero-check on :
		- auctionToken = _token (contracts/Auctions/DutchAuction.sol#59)
DutchAuction.initAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address)._paymentCurrency (contracts/Auctions/DutchAuction.sol#50) lacks a zero-check on :
		- paymentCurrency = _paymentCurrency (contracts/Auctions/DutchAuction.sol#60)
DutchAuction.initAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address)._wallet (contracts/Auctions/DutchAuction.sol#53) lacks a zero-check on :
		- wallet = _wallet (contracts/Auctions/DutchAuction.sol#66)
DutchAuction.commitEth(address)._from (contracts/Auctions/DutchAuction.sol#144) lacks a zero-check on :
		- _from.transfer(ethToRefund) (contracts/Auctions/DutchAuction.sol#156)
MISOMasterChef.initFarm(address,uint256,uint256,address,address)._devaddr (contracts/Farms/MISOMasterChef.sol#94) lacks a zero-check on :
		- devaddr = _devaddr (contracts/Farms/MISOMasterChef.sol#102)
MISOMasterChef.dev(address)._devaddr (contracts/Farms/MISOMasterChef.sol#326) lacks a zero-check on :
		- devaddr = _devaddr (contracts/Farms/MISOMasterChef.sol#328)
MasterChef.initFarm(address,uint256,uint256,address,address)._devaddr (contracts/Farms/MasterChef.sol#96) lacks a zero-check on :
		- devaddr = _devaddr (contracts/Farms/MasterChef.sol#105)
MasterChef.dev(address)._devaddr (contracts/Farms/MasterChef.sol#327) lacks a zero-check on :
		- devaddr = _devaddr (contracts/Farms/MasterChef.sol#329)
LiquidityZAP.initUniswapZAP(address,address,address).token (contracts/Liquidity/LiquidityZAP.sol#44) lacks a zero-check on :
		- _token = token (contracts/Liquidity/LiquidityZAP.sol#46)
LiquidityZAP.initUniswapZAP(address,address,address).tokenWethPair (contracts/Liquidity/LiquidityZAP.sol#44) lacks a zero-check on :
		- _tokenWETHPair = tokenWethPair (contracts/Liquidity/LiquidityZAP.sol#48)
PoolLiquidity.initPoolLiquidity(address,address,address,address,address,address,uint256,uint256,uint256)._wallet (contracts/Liquidity/PoolLiquidity.sol#55) lacks a zero-check on :
		- wallet = _wallet (contracts/Liquidity/PoolLiquidity.sol#68)
MISOFarmFactory.initMISOFarmFactory(address,address,uint256,uint256)._misoDiv (contracts/MISOFarmFactory.sol#57) lacks a zero-check on :
		- misoDiv = _misoDiv (contracts/MISOFarmFactory.sol#65)
MISOFarmFactory.setDividends(address)._divaddr (contracts/MISOFarmFactory.sol#89) lacks a zero-check on :
		- misoDiv = _divaddr (contracts/MISOFarmFactory.sol#94)
MISOLiquidityLauncher.initMISOLiquidityLauncher(address,address)._WETH (contracts/MISOLiquidityLauncher.sol#49) lacks a zero-check on :
		- WETH = _WETH (contracts/MISOLiquidityLauncher.sol#53)
MISOMarket.setDividends(address)._divaddr (contracts/MISOMarket.sol#93) lacks a zero-check on :
		- misoDiv = _divaddr (contracts/MISOMarket.sol#98)
MISOTokenFactory.setDividends(address)._divaddr (contracts/MISOTokenFactory.sol#90) lacks a zero-check on :
		- misoDiv = _divaddr (contracts/MISOTokenFactory.sol#95)
MISORecipe01.constructor(address,address,address,address,address,address)._uniswapFactory (contracts/Recipes/MISORecipe01.sol#100) lacks a zero-check on :
		- uniswapFactory = _uniswapFactory (contracts/Recipes/MISORecipe01.sol#107)
SimpleContract.init(uint256,uint256,address,address)._token (contracts/SimpleConctract.sol#32) lacks a zero-check on :
		- token = _token (contracts/SimpleConctract.sol#35)
SimpleContract.init(uint256,uint256,address,address)._wallet (contracts/SimpleConctract.sol#32) lacks a zero-check on :
		- wallet = address(_wallet) (contracts/SimpleConctract.sol#36)
UniswapV2Factory.constructor(address)._feeToSetter (contracts/UniswapV2/UniswapV2Factory.sol#16) lacks a zero-check on :
		- feeToSetter = _feeToSetter (contracts/UniswapV2/UniswapV2Factory.sol#17)
UniswapV2Factory.setFeeTo(address)._feeTo (contracts/UniswapV2/UniswapV2Factory.sol#45) lacks a zero-check on :
		- feeTo = _feeTo (contracts/UniswapV2/UniswapV2Factory.sol#47)
UniswapV2Factory.setMigrator(address)._migrator (contracts/UniswapV2/UniswapV2Factory.sol#50) lacks a zero-check on :
		- migrator = _migrator (contracts/UniswapV2/UniswapV2Factory.sol#52)
UniswapV2Factory.setFeeToSetter(address)._feeToSetter (contracts/UniswapV2/UniswapV2Factory.sol#55) lacks a zero-check on :
		- feeToSetter = _feeToSetter (contracts/UniswapV2/UniswapV2Factory.sol#57)
UniswapV2Pair.initialize(address,address)._token0 (contracts/UniswapV2/UniswapV2Pair.sol#70) lacks a zero-check on :
		- token0 = _token0 (contracts/UniswapV2/UniswapV2Pair.sol#72)
UniswapV2Pair.initialize(address,address)._token1 (contracts/UniswapV2/UniswapV2Pair.sol#70) lacks a zero-check on :
		- token1 = _token1 (contracts/UniswapV2/UniswapV2Pair.sol#73)
UniswapV2Router02.constructor(address,address)._factory (contracts/UniswapV2/UniswapV2Router02.sol#23) lacks a zero-check on :
		- factory = _factory (contracts/UniswapV2/UniswapV2Router02.sol#24)
UniswapV2Router02.constructor(address,address)._WETH (contracts/UniswapV2/UniswapV2Router02.sol#23) lacks a zero-check on :
		- WETH = _WETH (contracts/UniswapV2/UniswapV2Router02.sol#25)
Timelock.constructor(address,uint256).admin_ (contracts/Utils/Timelock.sol#36) lacks a zero-check on :
		- admin = admin_ (contracts/Utils/Timelock.sol#40)
Timelock.setPendingAdmin(address).pendingAdmin_ (contracts/Utils/Timelock.sol#64) lacks a zero-check on :
		- pendingAdmin = pendingAdmin_ (contracts/Utils/Timelock.sol#72)
Timelock.executeTransaction(address,uint256,string,bytes,uint256).target (contracts/Utils/Timelock.sol#97) lacks a zero-check on :
		- (success,returnData) = target.call.value(value)(callData) (contracts/Utils/Timelock.sol#116)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

UniswapV2Router02._swap(uint256[],address[],address) (contracts/UniswapV2/UniswapV2Router02.sol#212-223) has external calls inside a loop: IUniswapV2Pair(UniswapV2Library.pairFor(factory,input,output)).swap(amount0Out,amount1Out,to,new bytes(0)) (contracts/UniswapV2/UniswapV2Router02.sol#219-221)
UniswapV2Router02._swapSupportingFeeOnTransferTokens(address[],address) (contracts/UniswapV2/UniswapV2Router02.sol#321-338) has external calls inside a loop: (reserve0,reserve1) = pair.getReserves() (contracts/UniswapV2/UniswapV2Router02.sol#329)
UniswapV2Router02._swapSupportingFeeOnTransferTokens(address[],address) (contracts/UniswapV2/UniswapV2Router02.sol#321-338) has external calls inside a loop: amountInput = IERC20Uniswap(input).balanceOf(address(pair)).sub(reserveInput) (contracts/UniswapV2/UniswapV2Router02.sol#331)
UniswapV2Router02._swapSupportingFeeOnTransferTokens(address[],address) (contracts/UniswapV2/UniswapV2Router02.sol#321-338) has external calls inside a loop: pair.swap(amount0Out,amount1Out,to,new bytes(0)) (contracts/UniswapV2/UniswapV2Router02.sol#336)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in UniswapV2Pair.burn(address) (contracts/UniswapV2/UniswapV2Pair.sol#145-167):
	External calls:
	- _safeTransfer(_token0,to,amount0) (contracts/UniswapV2/UniswapV2Pair.sol#159)
		- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (contracts/UniswapV2/UniswapV2Pair.sol#49)
	- _safeTransfer(_token1,to,amount1) (contracts/UniswapV2/UniswapV2Pair.sol#160)
		- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (contracts/UniswapV2/UniswapV2Pair.sol#49)
	State variables written after the call(s):
	- _update(balance0,balance1,_reserve0,_reserve1) (contracts/UniswapV2/UniswapV2Pair.sol#164)
		- price0CumulativeLast += uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed (contracts/UniswapV2/UniswapV2Pair.sol#83)
	- _update(balance0,balance1,_reserve0,_reserve1) (contracts/UniswapV2/UniswapV2Pair.sol#164)
		- price1CumulativeLast += uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed (contracts/UniswapV2/UniswapV2Pair.sol#84)
Reentrancy in Crowdsale.buyTokens(address,uint256) (contracts/Auctions/Crowdsale.sol#199-204):
	External calls:
	- _safeTransferFrom(paymentCurrency,msg.sender,_tokenAmount) (contracts/Auctions/Crowdsale.sol#202)
		- (success,data) = _token.call(abi.encodeWithSelector(0x23b872dd,_from,address(this),_amount)) (contracts/Auctions/Crowdsale.sol#405-408)
	State variables written after the call(s):
	- _processBuy(_beneficiary,_tokenAmount) (contracts/Auctions/Crowdsale.sol#203)
		- balances[beneficiary] = balances[beneficiary].add(tokens) (contracts/Auctions/Crowdsale.sol#213)
Reentrancy in BatchAuction.commitTokensFrom(address,uint256) (contracts/Auctions/BatchAuction.sol#75-84):
	External calls:
	- _safeTransferFrom(paymentCurrency,_from,_amount) (contracts/Auctions/BatchAuction.sol#81)
		- (success,data) = token.call(abi.encodeWithSelector(0x23b872dd,from,address(this),amount)) (contracts/Auctions/BatchAuction.sol#204-208)
	State variables written after the call(s):
	- _addCommitment(_from,_amount) (contracts/Auctions/BatchAuction.sol#82)
		- commitments[_addr] = commitments[_addr].add(_commitment) (contracts/Auctions/BatchAuction.sol#155)
	- _addCommitment(_from,_amount) (contracts/Auctions/BatchAuction.sol#82)
		- commitmentsTotal = commitmentsTotal.add(_commitment) (contracts/Auctions/BatchAuction.sol#156)
Reentrancy in DutchAuction.commitTokensFrom(address,uint256) (contracts/Auctions/DutchAuction.sol#166-176):
	External calls:
	- _safeTransferFrom(paymentCurrency,_from,_amount) (contracts/Auctions/DutchAuction.sol#173)
		- (success,data) = token.call(abi.encodeWithSelector(0x23b872dd,from,address(this),amount)) (contracts/Auctions/DutchAuction.sol#350-354)
	State variables written after the call(s):
	- _addCommitment(_from,tokensToTransfer) (contracts/Auctions/DutchAuction.sol#174)
		- commitments[_addr] = commitments[_addr].add(_commitment) (contracts/Auctions/DutchAuction.sol#303)
Reentrancy in UniswapV2Factory.createPair(address,address) (contracts/UniswapV2/UniswapV2Factory.sol#28-43):
	External calls:
	- UniswapV2Pair(pair).initialize(token0,token1) (contracts/UniswapV2/UniswapV2Factory.sol#38)
	State variables written after the call(s):
	- allPairs.push(pair) (contracts/UniswapV2/UniswapV2Factory.sol#41)
Reentrancy in GnosisSafeFactory.createSafe(address[],uint256,address,bytes,address,address,uint256,address) (contracts/Vault/GnosisSafeFactory.sol#67-89):
	External calls:
	- proxy = proxyFactory.createProxy(safeGnosis,safeGnosisData) (contracts/Vault/GnosisSafeFactory.sol#82-85)
	State variables written after the call(s):
	- userToProxy[msg.sender] = proxy (contracts/Vault/GnosisSafeFactory.sol#86)
Reentrancy in WhiteListFactory.deployWhiteList(address,address[]) (contracts/Access/WhiteListFactory.sol#55-72):
	External calls:
	- IWhiteList(whiteList).initWhiteList(address(this)) (contracts/Access/WhiteListFactory.sol#63)
	- IWhiteList(whiteList).addWhiteList(_whiteListed) (contracts/Access/WhiteListFactory.sol#64)
	- IOwned(whiteList).transferOwnership(_listOwner) (contracts/Access/WhiteListFactory.sol#65)
	State variables written after the call(s):
	- children.push(address(whiteList)) (contracts/Access/WhiteListFactory.sol#67)
	- isChild[address(whiteList)] = true (contracts/Access/WhiteListFactory.sol#66)
Reentrancy in POLContract.depositToken(address,uint256,uint256) (contracts/Unicrypt/POLContract.sol#86-114):
	External calls:
	- require(bool,string)(IERC20(token).transferFrom(msg.sender,address(this),amountIn),Transfer failed) (contracts/Unicrypt/POLContract.sol#94)
	- require(bool,string)(IERC20(token).transferFrom(msg.sender,address(feeReserveAddress),fee),Transfer failed) (contracts/Unicrypt/POLContract.sol#95)
	State variables written after the call(s):
	- lockedTokenLookup[token] = true (contracts/Unicrypt/POLContract.sol#98)
	- lockedTokens.push(token) (contracts/Unicrypt/POLContract.sol#97)
	- liquidityTokenomics.releaseMap[unlock_date] = liquidityTokenomics.releaseMap[unlock_date].add(amountIn) (contracts/Unicrypt/POLContract.sol#103)
	- liquidityTokenomics.epochs.push(unlock_date) (contracts/Unicrypt/POLContract.sol#105)
	- liquidityTokenomics.releaseMap[unlock_date] = amountIn (contracts/Unicrypt/POLContract.sol#106)
	- uto.deposited = uto.deposited.add(amountIn) (contracts/Unicrypt/POLContract.sol#109)
Reentrancy in Crowdsale.initCrowdsale(address,address,address,uint256,uint256,uint256,uint256,uint256,address) (contracts/Auctions/Crowdsale.sol#87-121):
	External calls:
	- _safeTransferFrom(_token,_funder,_totalTokens) (contracts/Auctions/Crowdsale.sol#118)
		- (success,data) = _token.call(abi.encodeWithSelector(0x23b872dd,_from,address(this),_amount)) (contracts/Auctions/Crowdsale.sol#405-408)
	State variables written after the call(s):
	- finalized = false (contracts/Auctions/Crowdsale.sol#120)
Reentrancy in PoolLiquidity.initPoolLiquidity(address,address,address,address,address,address,uint256,uint256,uint256) (contracts/Liquidity/PoolLiquidity.sol#49-77):
	External calls:
	- _setTokenPair() (contracts/Liquidity/PoolLiquidity.sol#69)
		- tokenWETHPair = factory.createPair(address(token),address(WETH)) (contracts/Liquidity/PoolLiquidity.sol#178)
	State variables written after the call(s):
	- deadline = _deadline (contracts/Liquidity/PoolLiquidity.sol#72)
	- expiry = _deadline + _launchwindow (contracts/Liquidity/PoolLiquidity.sol#74)
	- launchwindow = _launchwindow (contracts/Liquidity/PoolLiquidity.sol#73)
	- locktime = _locktime (contracts/Liquidity/PoolLiquidity.sol#75)
Reentrancy in PoolLiquidity.launchLiquidityPool() (contracts/Liquidity/PoolLiquidity.sol#100-134):
	External calls:
	- assert(bool)(token.transfer(tokenWETHPair,tokenAmount)) (contracts/Liquidity/PoolLiquidity.sol#127)
	- assert(bool)(WETH.transfer(tokenWETHPair,wethAmount)) (contracts/Liquidity/PoolLiquidity.sol#128)
	- liquidity = IUniswapV2Pair(tokenWETHPair).mint(address(this)) (contracts/Liquidity/PoolLiquidity.sol#130)
	State variables written after the call(s):
	- liquidityAdded = liquidityAdded.add(liquidity) (contracts/Liquidity/PoolLiquidity.sol#131)
	- unlock = block.timestamp + locktime (contracts/Liquidity/PoolLiquidity.sol#132)
Reentrancy in TokenLock.lockTokens(address,uint256,uint256) (contracts/Vault/TokenLock.sol#30-48):
	External calls:
	- require(bool,string)(IERC20(_tokenAddress).transferFrom(msg.sender,address(this),_amount),Transfer of tokens failed) (contracts/Vault/TokenLock.sol#33)
	State variables written after the call(s):
	- allDepositIds.push(_id) (contracts/Vault/TokenLock.sol#46)
	- _id = ++ depositId (contracts/Vault/TokenLock.sol#39)
	- depositsByWithdrawalAddress[_withdrawalAddress].push(_id) (contracts/Vault/TokenLock.sol#47)
	- lockedToken[_id].tokenAddress = _tokenAddress (contracts/Vault/TokenLock.sol#40)
	- lockedToken[_id].withdrawalAddress = _withdrawalAddress (contracts/Vault/TokenLock.sol#41)
	- lockedToken[_id].tokenAmount = _amount (contracts/Vault/TokenLock.sol#42)
	- lockedToken[_id].unlockTime = _unlockTime (contracts/Vault/TokenLock.sol#43)
	- lockedToken[_id].withdrawn = false (contracts/Vault/TokenLock.sol#44)
	- walletTokenBalance[_tokenAddress][msg.sender] = walletTokenBalance[_tokenAddress][msg.sender].add(_amount) (contracts/Vault/TokenLock.sol#36)
Reentrancy in UniswapV2Pair.swap(uint256,uint256,address,bytes) (contracts/UniswapV2/UniswapV2Pair.sol#170-198):
	External calls:
	- _safeTransfer(_token0,to,amount0Out) (contracts/UniswapV2/UniswapV2Pair.sol#181)
		- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (contracts/UniswapV2/UniswapV2Pair.sol#49)
	- _safeTransfer(_token1,to,amount1Out) (contracts/UniswapV2/UniswapV2Pair.sol#182)
		- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (contracts/UniswapV2/UniswapV2Pair.sol#49)
	- IUniswapV2Callee(to).uniswapV2Call(msg.sender,amount0Out,amount1Out,data) (contracts/UniswapV2/UniswapV2Pair.sol#183)
	State variables written after the call(s):
	- _update(balance0,balance1,_reserve0,_reserve1) (contracts/UniswapV2/UniswapV2Pair.sol#196)
		- price0CumulativeLast += uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed (contracts/UniswapV2/UniswapV2Pair.sol#83)
	- _update(balance0,balance1,_reserve0,_reserve1) (contracts/UniswapV2/UniswapV2Pair.sol#196)
		- price1CumulativeLast += uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed (contracts/UniswapV2/UniswapV2Pair.sol#84)
Reentrancy in TokenLock.withdrawTokens(uint256) (contracts/Vault/TokenLock.sol#53-77):
	External calls:
	- require(bool,string)(IERC20(lockedToken[_id].tokenAddress).transfer(msg.sender,lockedToken[_id].tokenAmount),Transfer of tokens failed) (contracts/Vault/TokenLock.sol#57)
	State variables written after the call(s):
	- depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][i] = depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][i + 1] (contracts/Vault/TokenLock.sol#70)
	- depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress].pop() (contracts/Vault/TokenLock.sol#72)
	- walletTokenBalance[lockedToken[_id].tokenAddress][msg.sender] = walletTokenBalance[lockedToken[_id].tokenAddress][msg.sender].sub(lockedToken[_id].tokenAmount) (contracts/Vault/TokenLock.sol#62)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in UniswapV2Pair.burn(address) (contracts/UniswapV2/UniswapV2Pair.sol#145-167):
	External calls:
	- _safeTransfer(_token0,to,amount0) (contracts/UniswapV2/UniswapV2Pair.sol#159)
		- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (contracts/UniswapV2/UniswapV2Pair.sol#49)
	- _safeTransfer(_token1,to,amount1) (contracts/UniswapV2/UniswapV2Pair.sol#160)
		- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (contracts/UniswapV2/UniswapV2Pair.sol#49)
	Event emitted after the call(s):
	- Burn(msg.sender,amount0,amount1,to) (contracts/UniswapV2/UniswapV2Pair.sol#166)
	- Sync(reserve0,reserve1) (contracts/UniswapV2/UniswapV2Pair.sol#89)
		- _update(balance0,balance1,_reserve0,_reserve1) (contracts/UniswapV2/UniswapV2Pair.sol#164)
Reentrancy in Crowdsale.buyTokens(address,uint256) (contracts/Auctions/Crowdsale.sol#199-204):
	External calls:
	- _safeTransferFrom(paymentCurrency,msg.sender,_tokenAmount) (contracts/Auctions/Crowdsale.sol#202)
		- (success,data) = _token.call(abi.encodeWithSelector(0x23b872dd,_from,address(this),_amount)) (contracts/Auctions/Crowdsale.sol#405-408)
	Event emitted after the call(s):
	- TokensPurchased(_msgSender(),beneficiary,amount,tokens) (contracts/Auctions/Crowdsale.sol#218)
		- _processBuy(_beneficiary,_tokenAmount) (contracts/Auctions/Crowdsale.sol#203)
Reentrancy in BatchAuction.commitTokensFrom(address,uint256) (contracts/Auctions/BatchAuction.sol#75-84):
	External calls:
	- _safeTransferFrom(paymentCurrency,_from,_amount) (contracts/Auctions/BatchAuction.sol#81)
		- (success,data) = token.call(abi.encodeWithSelector(0x23b872dd,from,address(this),amount)) (contracts/Auctions/BatchAuction.sol#204-208)
	Event emitted after the call(s):
	- AddedCommitment(_addr,_commitment) (contracts/Auctions/BatchAuction.sol#157)
		- _addCommitment(_from,_amount) (contracts/Auctions/BatchAuction.sol#82)
Reentrancy in DutchAuction.commitTokensFrom(address,uint256) (contracts/Auctions/DutchAuction.sol#166-176):
	External calls:
	- _safeTransferFrom(paymentCurrency,_from,_amount) (contracts/Auctions/DutchAuction.sol#173)
		- (success,data) = token.call(abi.encodeWithSelector(0x23b872dd,from,address(this),amount)) (contracts/Auctions/DutchAuction.sol#350-354)
	Event emitted after the call(s):
	- AddedCommitment(_addr,_commitment) (contracts/Auctions/DutchAuction.sol#305)
		- _addCommitment(_from,tokensToTransfer) (contracts/Auctions/DutchAuction.sol#174)
Reentrancy in UniswapV2Factory.createPair(address,address) (contracts/UniswapV2/UniswapV2Factory.sol#28-43):
	External calls:
	- UniswapV2Pair(pair).initialize(token0,token1) (contracts/UniswapV2/UniswapV2Factory.sol#38)
	Event emitted after the call(s):
	- PairCreated(token0,token1,pair,allPairs.length) (contracts/UniswapV2/UniswapV2Factory.sol#42)
Reentrancy in GnosisSafeFactory.createSafe(address[],uint256,address,bytes,address,address,uint256,address) (contracts/Vault/GnosisSafeFactory.sol#67-89):
	External calls:
	- proxy = proxyFactory.createProxy(safeGnosis,safeGnosisData) (contracts/Vault/GnosisSafeFactory.sol#82-85)
	Event emitted after the call(s):
	- GnosisSafeCreated(msg.sender,address(proxy),address(safeGnosis),address(proxyFactory)) (contracts/Vault/GnosisSafeFactory.sol#87)
Reentrancy in MISOAccessFactory.deployAccessControl(address) (contracts/Access/MISOAccessFactory.sol#66-78):
	External calls:
	- MISOAccessControls(access).initAccessControls(_admin) (contracts/Access/MISOAccessFactory.sol#73)
	Event emitted after the call(s):
	- AccessControlCreated(msg.sender,address(access),_admin,accessControlTemplate) (contracts/Access/MISOAccessFactory.sol#74)
Reentrancy in WhiteListFactory.deployWhiteList(address,address[]) (contracts/Access/WhiteListFactory.sol#55-72):
	External calls:
	- IWhiteList(whiteList).initWhiteList(address(this)) (contracts/Access/WhiteListFactory.sol#63)
	- IWhiteList(whiteList).addWhiteList(_whiteListed) (contracts/Access/WhiteListFactory.sol#64)
	- IOwned(whiteList).transferOwnership(_listOwner) (contracts/Access/WhiteListFactory.sol#65)
	Event emitted after the call(s):
	- WhiteListDeployed(msg.sender,address(whiteList),whiteListTemplate,_listOwner) (contracts/Access/WhiteListFactory.sol#68)
Reentrancy in MISOMasterChef.deposit(uint256,uint256) (contracts/Farms/MISOMasterChef.sol#249-265):
	External calls:
	- safeRewardsTransfer(msg.sender,pending) (contracts/Farms/MISOMasterChef.sol#256)
		- rewards.transfer(_to,rewardsBal) (contracts/Farms/MISOMasterChef.sol#300)
		- rewards.transfer(_to,_amount) (contracts/Farms/MISOMasterChef.sol#302)
	- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (contracts/Farms/MISOMasterChef.sol#260)
	Event emitted after the call(s):
	- Deposit(msg.sender,_pid,_amount) (contracts/Farms/MISOMasterChef.sol#264)
Reentrancy in MasterChef.deposit(uint256,uint256) (contracts/Farms/MasterChef.sol#250-266):
	External calls:
	- safeRewardsTransfer(msg.sender,pending) (contracts/Farms/MasterChef.sol#257)
		- rewards.transfer(_to,rewardsBal) (contracts/Farms/MasterChef.sol#301)
		- rewards.transfer(_to,_amount) (contracts/Farms/MasterChef.sol#303)
	- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (contracts/Farms/MasterChef.sol#261)
	Event emitted after the call(s):
	- Deposit(msg.sender,_pid,_amount) (contracts/Farms/MasterChef.sol#265)
Reentrancy in TokenVault.deposit(address,uint256,address) (contracts/Vault/TokenVault.sol#69-77):
	External calls:
	- pool.token.transferFrom(address(msg.sender),address(this),_amount) (contracts/Vault/TokenVault.sol#74)
	Event emitted after the call(s):
	- Deposit(msg.sender,pid,_amount) (contracts/Vault/TokenVault.sol#76)
Reentrancy in POLContract.depositToken(address,uint256,uint256) (contracts/Unicrypt/POLContract.sol#86-114):
	External calls:
	- require(bool,string)(IERC20(token).transferFrom(msg.sender,address(this),amountIn),Transfer failed) (contracts/Unicrypt/POLContract.sol#94)
	- require(bool,string)(IERC20(token).transferFrom(msg.sender,address(feeReserveAddress),fee),Transfer failed) (contracts/Unicrypt/POLContract.sol#95)
	Event emitted after the call(s):
	- onDeposit(token,amount,unlock_date) (contracts/Unicrypt/POLContract.sol#113)
Reentrancy in MISOMasterChef.emergencyWithdraw(uint256) (contracts/Farms/MISOMasterChef.sol#286-294):
	External calls:
	- pool.lpToken.safeTransfer(address(msg.sender),amount) (contracts/Farms/MISOMasterChef.sol#292)
	Event emitted after the call(s):
	- EmergencyWithdraw(msg.sender,_pid,amount) (contracts/Farms/MISOMasterChef.sol#293)
Reentrancy in MasterChef.emergencyWithdraw(uint256) (contracts/Farms/MasterChef.sol#287-295):
	External calls:
	- pool.lpToken.safeTransfer(address(msg.sender),amount) (contracts/Farms/MasterChef.sol#293)
	Event emitted after the call(s):
	- EmergencyWithdraw(msg.sender,_pid,amount) (contracts/Farms/MasterChef.sol#294)
Reentrancy in Timelock.executeTransaction(address,uint256,string,bytes,uint256) (contracts/Utils/Timelock.sol#97-123):
	External calls:
	- (success,returnData) = target.call.value(value)(callData) (contracts/Utils/Timelock.sol#116)
	Event emitted after the call(s):
	- ExecuteTransaction(txHash,target,value,signature,data,eta) (contracts/Utils/Timelock.sol#120)
Reentrancy in Crowdsale.finalize() (contracts/Auctions/Crowdsale.sol#298-321):
	External calls:
	- _deliverTokens(wallet,unsoldTokens) (contracts/Auctions/Crowdsale.sol#315)
		- (success,data) = _token.call(abi.encodeWithSelector(0xa9059cbb,_to,_amount)) (contracts/Auctions/Crowdsale.sol#395-398)
	External calls sending eth:
	- _forwardFunds() (contracts/Auctions/Crowdsale.sol#308)
		- wallet.transfer(address(this).balance) (contracts/Auctions/Crowdsale.sol#341)
	Event emitted after the call(s):
	- CrowdsaleFinalized() (contracts/Auctions/Crowdsale.sol#320)
Reentrancy in PoolLiquidity.initPoolLiquidity(address,address,address,address,address,address,uint256,uint256,uint256) (contracts/Liquidity/PoolLiquidity.sol#49-77):
	External calls:
	- _setTokenPair() (contracts/Liquidity/PoolLiquidity.sol#69)
		- tokenWETHPair = factory.createPair(address(token),address(WETH)) (contracts/Liquidity/PoolLiquidity.sol#178)
	Event emitted after the call(s):
	- InitPoolLiquidity(address(_token),address(_WETH),address(_factory),_owner) (contracts/Liquidity/PoolLiquidity.sol#76)
Reentrancy in PoolLiquidity.launchLiquidityPool() (contracts/Liquidity/PoolLiquidity.sol#100-134):
	External calls:
	- assert(bool)(token.transfer(tokenWETHPair,tokenAmount)) (contracts/Liquidity/PoolLiquidity.sol#127)
	- assert(bool)(WETH.transfer(tokenWETHPair,wethAmount)) (contracts/Liquidity/PoolLiquidity.sol#128)
	- liquidity = IUniswapV2Pair(tokenWETHPair).mint(address(this)) (contracts/Liquidity/PoolLiquidity.sol#130)
	Event emitted after the call(s):
	- LiquidityAdded(liquidityAdded) (contracts/Liquidity/PoolLiquidity.sol#133)
Reentrancy in UniswapV2Pair.swap(uint256,uint256,address,bytes) (contracts/UniswapV2/UniswapV2Pair.sol#170-198):
	External calls:
	- _safeTransfer(_token0,to,amount0Out) (contracts/UniswapV2/UniswapV2Pair.sol#181)
		- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (contracts/UniswapV2/UniswapV2Pair.sol#49)
	- _safeTransfer(_token1,to,amount1Out) (contracts/UniswapV2/UniswapV2Pair.sol#182)
		- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (contracts/UniswapV2/UniswapV2Pair.sol#49)
	- IUniswapV2Callee(to).uniswapV2Call(msg.sender,amount0Out,amount1Out,data) (contracts/UniswapV2/UniswapV2Pair.sol#183)
	Event emitted after the call(s):
	- Swap(msg.sender,amount0In,amount1In,amount0Out,amount1Out,to) (contracts/UniswapV2/UniswapV2Pair.sol#197)
	- Sync(reserve0,reserve1) (contracts/UniswapV2/UniswapV2Pair.sol#89)
		- _update(balance0,balance1,_reserve0,_reserve1) (contracts/UniswapV2/UniswapV2Pair.sol#196)
Reentrancy in MISOMasterChef.withdraw(uint256,uint256) (contracts/Farms/MISOMasterChef.sol#268-283):
	External calls:
	- safeRewardsTransfer(msg.sender,pending) (contracts/Farms/MISOMasterChef.sol#275)
		- rewards.transfer(_to,rewardsBal) (contracts/Farms/MISOMasterChef.sol#300)
		- rewards.transfer(_to,_amount) (contracts/Farms/MISOMasterChef.sol#302)
	- pool.lpToken.safeTransfer(address(msg.sender),_amount) (contracts/Farms/MISOMasterChef.sol#279)
	Event emitted after the call(s):
	- Withdraw(msg.sender,_pid,_amount) (contracts/Farms/MISOMasterChef.sol#282)
Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/Farms/MasterChef.sol#269-284):
	External calls:
	- safeRewardsTransfer(msg.sender,pending) (contracts/Farms/MasterChef.sol#276)
		- rewards.transfer(_to,rewardsBal) (contracts/Farms/MasterChef.sol#301)
		- rewards.transfer(_to,_amount) (contracts/Farms/MasterChef.sol#303)
	- pool.lpToken.safeTransfer(address(msg.sender),_amount) (contracts/Farms/MasterChef.sol#280)
	Event emitted after the call(s):
	- Withdraw(msg.sender,_pid,_amount) (contracts/Farms/MasterChef.sol#283)
Reentrancy in TokenVault.withdraw(uint256,uint256) (contracts/Vault/TokenVault.sol#79-88):
	External calls:
	- pool.token.transfer(address(msg.sender),_amount) (contracts/Vault/TokenVault.sol#86)
	Event emitted after the call(s):
	- Withdraw(msg.sender,_pid,_amount) (contracts/Vault/TokenVault.sol#87)
Reentrancy in POLContract.withdrawToken(address,uint256) (contracts/Unicrypt/POLContract.sol#116-124):
	External calls:
	- require(bool,string)(IERC20(token).transfer(msg.sender,amount),Transfer failed) (contracts/Unicrypt/POLContract.sol#122)
	Event emitted after the call(s):
	- onWithdraw(token,amount) (contracts/Unicrypt/POLContract.sol#123)
Reentrancy in TokenLock.withdrawTokens(uint256) (contracts/Vault/TokenLock.sol#53-77):
	External calls:
	- require(bool,string)(IERC20(lockedToken[_id].tokenAddress).transfer(msg.sender,lockedToken[_id].tokenAmount),Transfer of tokens failed) (contracts/Vault/TokenLock.sol#57)
	Event emitted after the call(s):
	- LogWithdrawal(msg.sender,lockedToken[_id].tokenAmount) (contracts/Vault/TokenLock.sol#76)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

BatchAuction.finalizeAuction() (contracts/Auctions/BatchAuction.sol#92-107) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp > endTime,BatchAuction: Auction has not finished yet) (contracts/Auctions/BatchAuction.sol#95)
	- require(bool,string)(block.timestamp > endTime,BatchAuction: Auction has not finished yet) (contracts/Auctions/BatchAuction.sol#103)
BatchAuction.withdrawTokens() (contracts/Auctions/BatchAuction.sol#110-127) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp > endTime,BatchAuction: Auction has not finished yet) (contracts/Auctions/BatchAuction.sol#122)
BatchAuction.auctionEnded() (contracts/Auctions/BatchAuction.sol#148-150) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp > endTime (contracts/Auctions/BatchAuction.sol#149)
BatchAuction._addCommitment(address,uint256) (contracts/Auctions/BatchAuction.sol#153-158) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp >= startTime && block.timestamp <= endTime,BatchAuction: Outside auction hours) (contracts/Auctions/BatchAuction.sol#154)
Crowdsale.initCrowdsale(address,address,address,uint256,uint256,uint256,uint256,uint256,address) (contracts/Auctions/Crowdsale.sol#87-121) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_startTime >= block.timestamp,Crowdsale: start time is before current time) (contracts/Auctions/Crowdsale.sol#99)
Crowdsale.isOpen() (contracts/Auctions/Crowdsale.sol#364-366) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp >= startTime && block.timestamp <= endTime (contracts/Auctions/Crowdsale.sol#365)
Crowdsale.hasClosed() (contracts/Auctions/Crowdsale.sol#380-382) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp > endTime (contracts/Auctions/Crowdsale.sol#381)
DutchAuction.commitEth(address) (contracts/Auctions/DutchAuction.sol#144-158) uses timestamp for comparisons
	Dangerous comparisons:
	- ethToTransfer > 0 (contracts/Auctions/DutchAuction.sol#151)
	- ethToRefund > 0 (contracts/Auctions/DutchAuction.sol#155)
DutchAuction.commitTokensFrom(address,uint256) (contracts/Auctions/DutchAuction.sol#166-176) uses timestamp for comparisons
	Dangerous comparisons:
	- tokensToTransfer > 0 (contracts/Auctions/DutchAuction.sol#172)
DutchAuction.finalizeAuction() (contracts/Auctions/DutchAuction.sol#186-200) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp > endTime,DutchAuction: Auction has not finished yet) (contracts/Auctions/DutchAuction.sol#196)
DutchAuction.withdrawTokens() (contracts/Auctions/DutchAuction.sol#203-220) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(tokensToClaim > 0,DutchAuction: No tokens to claim) (contracts/Auctions/DutchAuction.sol#209)
	- require(bool,string)(block.timestamp > endTime,DutchAuction: Auction has not finished yet) (contracts/Auctions/DutchAuction.sol#215)
DutchAuction.priceFunction() (contracts/Auctions/DutchAuction.sol#244-254) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp <= startTime (contracts/Auctions/DutchAuction.sol#246)
	- block.timestamp >= endTime (contracts/Auctions/DutchAuction.sol#249)
DutchAuction.clearingPrice() (contracts/Auctions/DutchAuction.sol#257-263) uses timestamp for comparisons
	Dangerous comparisons:
	- tokenPrice() > priceFunction() (contracts/Auctions/DutchAuction.sol#259)
DutchAuction.calculateCommitment(uint256) (contracts/Auctions/DutchAuction.sol#278-288) uses timestamp for comparisons
	Dangerous comparisons:
	- commitmentsTotal.add(_commitment) > maxCommitment (contracts/Auctions/DutchAuction.sol#284)
DutchAuction.auctionSuccessful() (contracts/Auctions/DutchAuction.sol#291-293) uses timestamp for comparisons
	Dangerous comparisons:
	- commitmentsTotal.mul(1e18).div(totalTokens) >= clearingPrice() (contracts/Auctions/DutchAuction.sol#292)
DutchAuction.auctionEnded() (contracts/Auctions/DutchAuction.sol#296-298) uses timestamp for comparisons
	Dangerous comparisons:
	- auctionSuccessful() || block.timestamp > endTime (contracts/Auctions/DutchAuction.sol#297)
DutchAuction._addCommitment(address,uint256) (contracts/Auctions/DutchAuction.sol#301-306) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp >= startTime && block.timestamp <= endTime,DutchAuction: Outside auction hours) (contracts/Auctions/DutchAuction.sol#302)
DutchAuction._safeTransfer(address,address,uint256) (contracts/Auctions/DutchAuction.sol#330-342) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(success && (data.length == 0 || abi.decode(data,(bool)))) (contracts/Auctions/DutchAuction.sol#341)
PoolLiquidity.depositETH() (contracts/Liquidity/PoolLiquidity.sol#85-91) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp < deadline,Deposit deadline has passed) (contracts/Liquidity/PoolLiquidity.sol#86)
PoolLiquidity.depositTokens(uint256) (contracts/Liquidity/PoolLiquidity.sol#93-98) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp < deadline,Deposit deadline has passed) (contracts/Liquidity/PoolLiquidity.sol#95)
PoolLiquidity.launchLiquidityPool() (contracts/Liquidity/PoolLiquidity.sol#100-134) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp > deadline,Deposit deadline has not passed) (contracts/Liquidity/PoolLiquidity.sol#106)
	- require(bool,string)(block.timestamp < expiry,Contract has expired) (contracts/Liquidity/PoolLiquidity.sol#107)
PoolLiquidity.withdrawLPTokens() (contracts/Liquidity/PoolLiquidity.sol#136-146) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp >= unlock,Liquidity is locked) (contracts/Liquidity/PoolLiquidity.sol#141)
PoolLiquidity.withdrawDeposits() (contracts/Liquidity/PoolLiquidity.sol#148-163) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp > expiry,Timer has not yet expired) (contracts/Liquidity/PoolLiquidity.sol#154)
SushiToken.delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32) (contracts/Tokens/SushiToken.sol#128-169) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now <= expiry,SUSHI::delegateBySig: signature expired) (contracts/Tokens/SushiToken.sol#167)
POLContract.getWithdrawableBalance(address,address) (contracts/Unicrypt/POLContract.sol#126-138) uses timestamp for comparisons
	Dangerous comparisons:
	- vestingPeriod.epoch < block.timestamp (contracts/Unicrypt/POLContract.sol#132)
UniswapV2ERC20.permit(address,address,uint256,uint256,uint8,bytes32,bytes32) (contracts/UniswapV2/UniswapV2ERC20.sol#80-92) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(deadline >= block.timestamp,UniswapV2: EXPIRED) (contracts/UniswapV2/UniswapV2ERC20.sol#81)
UniswapV2Pair._update(uint256,uint256,uint112,uint112) (contracts/UniswapV2/UniswapV2Pair.sol#77-90) uses timestamp for comparisons
	Dangerous comparisons:
	- timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0 (contracts/UniswapV2/UniswapV2Pair.sol#81)
Timelock.queueTransaction(address,uint256,string,bytes,uint256) (contracts/Utils/Timelock.sol#77-86) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(eta >= getBlockTimestamp().add(delay),Timelock::queueTransaction: Estimated execution block must satisfy delay.) (contracts/Utils/Timelock.sol#79)
Timelock.executeTransaction(address,uint256,string,bytes,uint256) (contracts/Utils/Timelock.sol#97-123) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(getBlockTimestamp() >= eta,Timelock::executeTransaction: Transaction hasn't surpassed time lock.) (contracts/Utils/Timelock.sol#102)
	- require(bool,string)(getBlockTimestamp() <= eta.add(GRACE_PERIOD),Timelock::executeTransaction: Transaction is stale.) (contracts/Utils/Timelock.sol#103)
TokenLock.withdrawTokens(uint256) (contracts/Vault/TokenLock.sol#53-77) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp >= lockedToken[_id].unlockTime,Tokens are locked) (contracts/Vault/TokenLock.sol#54)
TokenVault.add(IERC20,bool,uint256) (contracts/Vault/TokenVault.sol#36-51) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(poolInfo[pid].token != _token,Error pool already added) (contracts/Vault/TokenVault.sol#42)
TokenVault.withdraw(uint256,uint256) (contracts/Vault/TokenVault.sol#79-88) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now >= pool.endDate,Timelock: Funds cannot be withdrawn yet) (contracts/Vault/TokenVault.sol#82)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

SimpleContract.uintToBytes(uint256) (contracts/SimpleConctract.sol#83-85) uses assembly
	- INLINE ASM (contracts/SimpleConctract.sol#84)
SushiToken.getChainId() (contracts/Tokens/SushiToken.sol#287-291) uses assembly
	- INLINE ASM (contracts/Tokens/SushiToken.sol#289)
UniswapV2ERC20.constructor() (contracts/UniswapV2/UniswapV2ERC20.sol#23-37) uses assembly
	- INLINE ASM (contracts/UniswapV2/UniswapV2ERC20.sol#25-27)
UniswapV2Factory.createPair(address,address) (contracts/UniswapV2/UniswapV2Factory.sol#28-43) uses assembly
	- INLINE ASM (contracts/UniswapV2/UniswapV2Factory.sol#35-37)
CloneFactory.createClone(address) (contracts/Utils/CloneFactory.sol#34-43) uses assembly
	- INLINE ASM (contracts/Utils/CloneFactory.sol#36-42)
CloneFactory.isClone(address,address) (contracts/Utils/CloneFactory.sol#45-60) uses assembly
	- INLINE ASM (contracts/Utils/CloneFactory.sol#47-59)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

PointList.setPoints(address[],uint256[]) (contracts/Access/PointList.sol#38-60) has costly operations inside a loop:
	- totalPoints = totalPoints.add(amount).sub(previousPoints) (contracts/Access/PointList.sol#56)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

Pragma version0.6.12 (contracts/Access/MISOAccessControls.sol#1) necessitates a version too recent to be trusted. Consider deploying with 0.6.11
Pragma version^0.6.9 (contracts/Access/MISOAccessFactory.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version0.6.12 (contracts/Access/MISOAdminAccess.sol#1) necessitates a version too recent to be trusted. Consider deploying with 0.6.11
Pragma version^0.6.9 (contracts/Access/PointList.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/Access/WhiteList.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/Access/WhiteListFactory.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/Auctions/BatchAuction.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/Auctions/Crowdsale.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/Auctions/DutchAuction.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version0.6.12 (contracts/Farms/MISOMasterChef.sol#1) necessitates a version too recent to be trusted. Consider deploying with 0.6.11
Pragma version0.6.12 (contracts/Farms/MasterChef.sol#1) necessitates a version too recent to be trusted. Consider deploying with 0.6.11
Pragma version^0.6.12 (contracts/Liquidity/LiquidityZAP.sol#1) necessitates a version too recent to be trusted. Consider deploying with 0.6.11
Pragma version^0.6.9 (contracts/Liquidity/PoolLiquidity.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/MISOFarmFactory.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/MISOFermenter.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/MISOLiquidityLauncher.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/MISOMarket.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/MISOSplitter.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/MISOTokenFactory.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/Recipes/MISORecipe01.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.12 (contracts/SimpleConctract.sol#1) necessitates a version too recent to be trusted. Consider deploying with 0.6.11
Pragma version>=0.6.0<0.8.0 (contracts/Tokens/ERC20.sol#3) is too complex
Pragma version^0.6.0 (contracts/Tokens/ERC20/ERC20Burnable.sol#3) allows old versions
Pragma version^0.6.0 (contracts/Tokens/ERC20/ERC20Pausable.sol#3) allows old versions
Pragma version^0.6.9 (contracts/Tokens/FixedToken.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/Tokens/MintableToken.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version0.6.12 (contracts/Tokens/SushiToken.sol#1) necessitates a version too recent to be trusted. Consider deploying with 0.6.11
Pragma version=0.6.12 (contracts/UniswapV2/UniswapV2ERC20.sol#1) necessitates a version too recent to be trusted. Consider deploying with 0.6.11
Pragma version=0.6.12 (contracts/UniswapV2/UniswapV2Factory.sol#1) necessitates a version too recent to be trusted. Consider deploying with 0.6.11
Pragma version^0.6.9 (contracts/UniswapV2/UniswapV2Library.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version=0.6.12 (contracts/UniswapV2/UniswapV2Pair.sol#1) necessitates a version too recent to be trusted. Consider deploying with 0.6.11
Pragma version=0.6.12 (contracts/UniswapV2/UniswapV2Router02.sol#1) necessitates a version too recent to be trusted. Consider deploying with 0.6.11
Pragma version^0.6.9 (contracts/UniswapV2/interfaces/IERC20.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/UniswapV2/interfaces/IUniswapV2Callee.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/UniswapV2/interfaces/IUniswapV2ERC20.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/UniswapV2/interfaces/IUniswapV2Factory.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/UniswapV2/interfaces/IUniswapV2Pair.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/UniswapV2/interfaces/IUniswapV2Router01.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/UniswapV2/interfaces/IUniswapV2Router02.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/UniswapV2/interfaces/IWETH.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version=0.6.12 (contracts/UniswapV2/libraries/Math.sol#1) necessitates a version too recent to be trusted. Consider deploying with 0.6.11
Pragma version=0.6.12 (contracts/UniswapV2/libraries/SafeMath.sol#1) necessitates a version too recent to be trusted. Consider deploying with 0.6.11
Pragma version^0.6.9 (contracts/UniswapV2/libraries/TransferHelper.sol#2) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version=0.6.12 (contracts/UniswapV2/libraries/UQ112x112.sol#1) necessitates a version too recent to be trusted. Consider deploying with 0.6.11
Pragma version^0.6.9 (contracts/Utils/CloneFactory.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/Utils/Owned.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/Utils/SafeMathPlus.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version0.6.12 (contracts/Utils/Timelock.sol#10) necessitates a version too recent to be trusted. Consider deploying with 0.6.11
Pragma version^0.6.9 (contracts/Utils/WETH9.sol#16) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/Vault/GnosisSafeFactory.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/Vault/TokenLock.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/Vault/TokenVault.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/interfaces/IGnosisProxyFactory.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/interfaces/IMisoAuction.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/interfaces/IMisoCrowdsale.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/interfaces/IMisoFarm.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/interfaces/IMisoFermenter.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/interfaces/IMisoLauncher.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/interfaces/IMisoLiquidity.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/interfaces/IMisoMarket.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/interfaces/IMisoToken.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/interfaces/IOwned.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/interfaces/ISafeGnosis.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/interfaces/ISushiToken.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/interfaces/IUnicrypt.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/interfaces/IWETH9.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
Pragma version^0.6.9 (contracts/interfaces/IWhiteList.sol#1) is known to contain severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in BatchAuction._safeTransfer(address,address,uint256) (contracts/Auctions/BatchAuction.sol#184-196):
	- (success,data) = token.call(abi.encodeWithSelector(0xa9059cbb,to,amount)) (contracts/Auctions/BatchAuction.sol#190-194)
Low level call in BatchAuction._safeTransferFrom(address,address,uint256) (contracts/Auctions/BatchAuction.sol#198-210):
	- (success,data) = token.call(abi.encodeWithSelector(0x23b872dd,from,address(this),amount)) (contracts/Auctions/BatchAuction.sol#204-208)
Low level call in Crowdsale._safeTransfer(address,address,uint256) (contracts/Auctions/Crowdsale.sol#393-400):
	- (success,data) = _token.call(abi.encodeWithSelector(0xa9059cbb,_to,_amount)) (contracts/Auctions/Crowdsale.sol#395-398)
Low level call in Crowdsale._safeTransferFrom(address,address,uint256) (contracts/Auctions/Crowdsale.sol#403-410):
	- (success,data) = _token.call(abi.encodeWithSelector(0x23b872dd,_from,address(this),_amount)) (contracts/Auctions/Crowdsale.sol#405-408)
Low level call in DutchAuction._safeTransfer(address,address,uint256) (contracts/Auctions/DutchAuction.sol#330-342):
	- (success,data) = token.call(abi.encodeWithSelector(0xa9059cbb,to,amount)) (contracts/Auctions/DutchAuction.sol#336-340)
Low level call in DutchAuction._safeTransferFrom(address,address,uint256) (contracts/Auctions/DutchAuction.sol#344-356):
	- (success,data) = token.call(abi.encodeWithSelector(0x23b872dd,from,address(this),amount)) (contracts/Auctions/DutchAuction.sol#350-354)
Low level call in LiquidityZAP.safeApprove(address,address,uint256) (contracts/Liquidity/LiquidityZAP.sol#230-234):
	- (success,data) = token.call(abi.encodeWithSelector(0x095ea7b3,to,value)) (contracts/Liquidity/LiquidityZAP.sol#232)
Low level call in LiquidityZAP.safeTransfer(address,address,uint256) (contracts/Liquidity/LiquidityZAP.sol#236-240):
	- (success,data) = token.call(abi.encodeWithSelector(0xa9059cbb,to,value)) (contracts/Liquidity/LiquidityZAP.sol#238)
Low level call in LiquidityZAP.safeTransferFrom(address,address,address,uint256) (contracts/Liquidity/LiquidityZAP.sol#242-246):
	- (success,data) = token.call(abi.encodeWithSelector(0x23b872dd,from,to,value)) (contracts/Liquidity/LiquidityZAP.sol#244)
Low level call in LiquidityZAP.safeTransferETH(address,uint256) (contracts/Liquidity/LiquidityZAP.sol#248-251):
	- (success) = to.call{value: value}(new bytes(0)) (contracts/Liquidity/LiquidityZAP.sol#249)
Low level call in UniswapV2Pair._safeTransfer(address,address,uint256) (contracts/UniswapV2/UniswapV2Pair.sol#48-51):
	- (success,data) = token.call(abi.encodeWithSelector(SELECTOR,to,value)) (contracts/UniswapV2/UniswapV2Pair.sol#49)
Low level call in TransferHelper.safeApprove(address,address,uint256) (contracts/UniswapV2/libraries/TransferHelper.sol#6-10):
	- (success,data) = token.call(abi.encodeWithSelector(0x095ea7b3,to,value)) (contracts/UniswapV2/libraries/TransferHelper.sol#8)
Low level call in TransferHelper.safeTransfer(address,address,uint256) (contracts/UniswapV2/libraries/TransferHelper.sol#12-16):
	- (success,data) = token.call(abi.encodeWithSelector(0xa9059cbb,to,value)) (contracts/UniswapV2/libraries/TransferHelper.sol#14)
Low level call in TransferHelper.safeTransferFrom(address,address,address,uint256) (contracts/UniswapV2/libraries/TransferHelper.sol#18-22):
	- (success,data) = token.call(abi.encodeWithSelector(0x23b872dd,from,to,value)) (contracts/UniswapV2/libraries/TransferHelper.sol#20)
Low level call in TransferHelper.safeTransferETH(address,uint256) (contracts/UniswapV2/libraries/TransferHelper.sol#24-27):
	- (success) = to.call{value: value}(new bytes(0)) (contracts/UniswapV2/libraries/TransferHelper.sol#25)
Low level call in Timelock.executeTransaction(address,uint256,string,bytes,uint256) (contracts/Utils/Timelock.sol#97-123):
	- (success,returnData) = target.call.value(value)(callData) (contracts/Utils/Timelock.sol#116)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Crowdsale (contracts/Auctions/Crowdsale.sol#9-412) should inherit from IMisoCrowdsale (contracts/interfaces/IMisoCrowdsale.sol#3-15)
Crowdsale (contracts/Auctions/Crowdsale.sol#9-412) should inherit from IMisoMarket (contracts/interfaces/IMisoMarket.sol#3-8)
DutchAuction (contracts/Auctions/DutchAuction.sol#7-357) should inherit from IMisoAuction (contracts/interfaces/IMisoAuction.sol#3-27)
DutchAuction (contracts/Auctions/DutchAuction.sol#7-357) should inherit from IMisoMarket (contracts/interfaces/IMisoMarket.sol#3-8)
MISOMasterChef (contracts/Farms/MISOMasterChef.sol#27-331) should inherit from IMasterChef (contracts/Recipes/MISORecipe01.sol#63-72)
MasterChef (contracts/Farms/MasterChef.sol#27-332) should inherit from IMasterChef (contracts/Recipes/MISORecipe01.sol#63-72)
PoolLiquidity (contracts/Liquidity/PoolLiquidity.sol#19-217) should inherit from IPoolLiquidity (contracts/Recipes/MISORecipe01.sol#37-50)
MISOLiquidityLauncher (contracts/MISOLiquidityLauncher.sol#8-124) should inherit from IMisoLauncher (contracts/interfaces/IMisoLauncher.sol#3-8)
MintableToken (contracts/Tokens/MintableToken.sol#8-99) should inherit from ISushiToken (contracts/interfaces/ISushiToken.sol#4-19)
SushiToken (contracts/Tokens/SushiToken.sol#12-293) should inherit from ISushiToken (contracts/interfaces/ISushiToken.sol#4-19)
POLContract (contracts/Unicrypt/POLContract.sol#6-170) should inherit from IUnicrypt (contracts/interfaces/IUnicrypt.sol#3-22)
WETH9 (contracts/Utils/WETH9.sol#18-77) should inherit from IWETH2 (contracts/UniswapV2/interfaces/IWETH.sol#3-8)
TokenVault (contracts/Vault/TokenVault.sol#7-91) should inherit from IMisoFermenter (contracts/interfaces/IMisoFermenter.sol#3-6)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-inheritance

Parameter MISOAccessControls.hasMinterRole(address)._address (contracts/Access/MISOAccessControls.sol#64) is not in mixedCase
Parameter MISOAccessControls.hasSmartContractRole(address)._address (contracts/Access/MISOAccessControls.sol#73) is not in mixedCase
Parameter MISOAccessControls.hasOperatorRole(address)._address (contracts/Access/MISOAccessControls.sol#82) is not in mixedCase
Parameter MISOAccessControls.addMinterRole(address)._address (contracts/Access/MISOAccessControls.sol#95) is not in mixedCase
Parameter MISOAccessControls.removeMinterRole(address)._address (contracts/Access/MISOAccessControls.sol#105) is not in mixedCase
Parameter MISOAccessControls.addSmartContractRole(address)._address (contracts/Access/MISOAccessControls.sol#115) is not in mixedCase
Parameter MISOAccessControls.removeSmartContractRole(address)._address (contracts/Access/MISOAccessControls.sol#125) is not in mixedCase
Parameter MISOAccessControls.addOperatorRole(address)._address (contracts/Access/MISOAccessControls.sol#135) is not in mixedCase
Parameter MISOAccessControls.removeOperatorRole(address)._address (contracts/Access/MISOAccessControls.sol#145) is not in mixedCase
Parameter MISOAccessFactory.initMISOAccessFactory(uint256,address)._minimumFee (contracts/Access/MISOAccessFactory.sol#48) is not in mixedCase
Parameter MISOAccessFactory.initMISOAccessFactory(uint256,address)._accessControls (contracts/Access/MISOAccessFactory.sol#48) is not in mixedCase
Parameter MISOAccessFactory.deployAccessControl(address)._admin (contracts/Access/MISOAccessFactory.sol#66) is not in mixedCase
Parameter MISOAccessFactory.updateAccessTemplate(address)._template (contracts/Access/MISOAccessFactory.sol#85) is not in mixedCase
Parameter MISOAccessFactory.setDev(address)._devaddr (contracts/Access/MISOAccessFactory.sol#95) is not in mixedCase
Parameter MISOAccessFactory.setMinimumFee(uint256)._minimumFee (contracts/Access/MISOAccessFactory.sol#104) is not in mixedCase
Parameter MISOAdminAccess.initAccessControls(address)._admin (contracts/Access/MISOAdminAccess.sol#30) is not in mixedCase
Parameter MISOAdminAccess.hasAdminRole(address)._address (contracts/Access/MISOAdminAccess.sol#45) is not in mixedCase
Parameter MISOAdminAccess.addAdminRole(address)._address (contracts/Access/MISOAdminAccess.sol#58) is not in mixedCase
Parameter MISOAdminAccess.removeAdminRole(address)._address (contracts/Access/MISOAdminAccess.sol#68) is not in mixedCase
Parameter PointList.initPointList(address)._accessControls (contracts/Access/PointList.sol#28) is not in mixedCase
Parameter WhiteList.initWhiteList(address)._accessControls (contracts/Access/WhiteList.sol#29) is not in mixedCase
Parameter WhiteListFactory.initWhiteListFactory(address,uint256)._whiteListTemplate (contracts/Access/WhiteListFactory.sol#34) is not in mixedCase
Parameter WhiteListFactory.initWhiteListFactory(address,uint256)._minimumFee (contracts/Access/WhiteListFactory.sol#34) is not in mixedCase
Parameter WhiteListFactory.deprecateFactory(address)._newAddress (contracts/Access/WhiteListFactory.sol#43) is not in mixedCase
Parameter WhiteListFactory.setMinimumFee(uint256)._minimumFee (contracts/Access/WhiteListFactory.sol#49) is not in mixedCase
Parameter WhiteListFactory.deployWhiteList(address,address[])._listOwner (contracts/Access/WhiteListFactory.sol#56) is not in mixedCase
Parameter WhiteListFactory.deployWhiteList(address,address[])._whiteListed (contracts/Access/WhiteListFactory.sol#57) is not in mixedCase
Parameter BatchAuction.initAuction(address,address,uint256,uint256,uint256,address,uint256,address)._funder (contracts/Auctions/BatchAuction.sol#28) is not in mixedCase
Parameter BatchAuction.initAuction(address,address,uint256,uint256,uint256,address,uint256,address)._token (contracts/Auctions/BatchAuction.sol#29) is not in mixedCase
Parameter BatchAuction.initAuction(address,address,uint256,uint256,uint256,address,uint256,address)._totalTokens (contracts/Auctions/BatchAuction.sol#30) is not in mixedCase
Parameter BatchAuction.initAuction(address,address,uint256,uint256,uint256,address,uint256,address)._startTime (contracts/Auctions/BatchAuction.sol#31) is not in mixedCase
Parameter BatchAuction.initAuction(address,address,uint256,uint256,uint256,address,uint256,address)._endTime (contracts/Auctions/BatchAuction.sol#32) is not in mixedCase
Parameter BatchAuction.initAuction(address,address,uint256,uint256,uint256,address,uint256,address)._paymentCurrency (contracts/Auctions/BatchAuction.sol#33) is not in mixedCase
Parameter BatchAuction.initAuction(address,address,uint256,uint256,uint256,address,uint256,address)._minimumCommitmentAmount (contracts/Auctions/BatchAuction.sol#34) is not in mixedCase
Parameter BatchAuction.initAuction(address,address,uint256,uint256,uint256,address,uint256,address)._wallet (contracts/Auctions/BatchAuction.sol#35) is not in mixedCase
Parameter BatchAuction.commitEth(address)._from (contracts/Auctions/BatchAuction.sol#63) is not in mixedCase
Parameter BatchAuction.commitTokens(uint256)._amount (contracts/Auctions/BatchAuction.sol#70) is not in mixedCase
Parameter BatchAuction.commitTokensFrom(address,uint256)._from (contracts/Auctions/BatchAuction.sol#75) is not in mixedCase
Parameter BatchAuction.commitTokensFrom(address,uint256)._amount (contracts/Auctions/BatchAuction.sol#75) is not in mixedCase
Parameter BatchAuction.tokensClaimable(address)._user (contracts/Auctions/BatchAuction.sol#135) is not in mixedCase
Parameter Crowdsale.initCrowdsale(address,address,address,uint256,uint256,uint256,uint256,uint256,address)._funder (contracts/Auctions/Crowdsale.sol#88) is not in mixedCase
Parameter Crowdsale.initCrowdsale(address,address,address,uint256,uint256,uint256,uint256,uint256,address)._token (contracts/Auctions/Crowdsale.sol#89) is not in mixedCase
Parameter Crowdsale.initCrowdsale(address,address,address,uint256,uint256,uint256,uint256,uint256,address)._paymentCurrency (contracts/Auctions/Crowdsale.sol#90) is not in mixedCase
Parameter Crowdsale.initCrowdsale(address,address,address,uint256,uint256,uint256,uint256,uint256,address)._totalTokens (contracts/Auctions/Crowdsale.sol#91) is not in mixedCase
Parameter Crowdsale.initCrowdsale(address,address,address,uint256,uint256,uint256,uint256,uint256,address)._startTime (contracts/Auctions/Crowdsale.sol#92) is not in mixedCase
Parameter Crowdsale.initCrowdsale(address,address,address,uint256,uint256,uint256,uint256,uint256,address)._endTime (contracts/Auctions/Crowdsale.sol#93) is not in mixedCase
Parameter Crowdsale.initCrowdsale(address,address,address,uint256,uint256,uint256,uint256,uint256,address)._rate (contracts/Auctions/Crowdsale.sol#94) is not in mixedCase
Parameter Crowdsale.initCrowdsale(address,address,address,uint256,uint256,uint256,uint256,uint256,address)._goal (contracts/Auctions/Crowdsale.sol#95) is not in mixedCase
Parameter Crowdsale.initCrowdsale(address,address,address,uint256,uint256,uint256,uint256,uint256,address)._wallet (contracts/Auctions/Crowdsale.sol#96) is not in mixedCase
Parameter Crowdsale.initMarket(bytes)._data (contracts/Auctions/Crowdsale.sol#124) is not in mixedCase
Parameter Crowdsale.getCrowdsaleInitData(address,address,address,uint256,uint256,uint256,uint256,uint256,address)._funder (contracts/Auctions/Crowdsale.sol#153) is not in mixedCase
Parameter Crowdsale.getCrowdsaleInitData(address,address,address,uint256,uint256,uint256,uint256,uint256,address)._token (contracts/Auctions/Crowdsale.sol#154) is not in mixedCase
Parameter Crowdsale.getCrowdsaleInitData(address,address,address,uint256,uint256,uint256,uint256,uint256,address)._paymentCurrency (contracts/Auctions/Crowdsale.sol#155) is not in mixedCase
Parameter Crowdsale.getCrowdsaleInitData(address,address,address,uint256,uint256,uint256,uint256,uint256,address)._totalTokens (contracts/Auctions/Crowdsale.sol#156) is not in mixedCase
Parameter Crowdsale.getCrowdsaleInitData(address,address,address,uint256,uint256,uint256,uint256,uint256,address)._startTime (contracts/Auctions/Crowdsale.sol#157) is not in mixedCase
Parameter Crowdsale.getCrowdsaleInitData(address,address,address,uint256,uint256,uint256,uint256,uint256,address)._endTime (contracts/Auctions/Crowdsale.sol#158) is not in mixedCase
Parameter Crowdsale.getCrowdsaleInitData(address,address,address,uint256,uint256,uint256,uint256,uint256,address)._rate (contracts/Auctions/Crowdsale.sol#159) is not in mixedCase
Parameter Crowdsale.getCrowdsaleInitData(address,address,address,uint256,uint256,uint256,uint256,uint256,address)._goal (contracts/Auctions/Crowdsale.sol#160) is not in mixedCase
Parameter Crowdsale.getCrowdsaleInitData(address,address,address,uint256,uint256,uint256,uint256,uint256,address)._wallet (contracts/Auctions/Crowdsale.sol#161) is not in mixedCase
Parameter Crowdsale.buyTokensEth(address)._beneficiary (contracts/Auctions/Crowdsale.sol#185) is not in mixedCase
Parameter Crowdsale.buyTokens(address,uint256)._beneficiary (contracts/Auctions/Crowdsale.sol#199) is not in mixedCase
Parameter Crowdsale.buyTokens(address,uint256)._tokenAmount (contracts/Auctions/Crowdsale.sol#199) is not in mixedCase
Constant Crowdsale.marketTemplate (contracts/Auctions/Crowdsale.sol#51) is not in UPPER_CASE_WITH_UNDERSCORES
Parameter DutchAuction.initAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address)._funder (contracts/Auctions/DutchAuction.sol#45) is not in mixedCase
Parameter DutchAuction.initAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address)._token (contracts/Auctions/DutchAuction.sol#46) is not in mixedCase
Parameter DutchAuction.initAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address)._totalTokens (contracts/Auctions/DutchAuction.sol#47) is not in mixedCase
Parameter DutchAuction.initAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address)._startTime (contracts/Auctions/DutchAuction.sol#48) is not in mixedCase
Parameter DutchAuction.initAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address)._endTime (contracts/Auctions/DutchAuction.sol#49) is not in mixedCase
Parameter DutchAuction.initAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address)._paymentCurrency (contracts/Auctions/DutchAuction.sol#50) is not in mixedCase
Parameter DutchAuction.initAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address)._startPrice (contracts/Auctions/DutchAuction.sol#51) is not in mixedCase
Parameter DutchAuction.initAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address)._minimumPrice (contracts/Auctions/DutchAuction.sol#52) is not in mixedCase
Parameter DutchAuction.initAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address)._wallet (contracts/Auctions/DutchAuction.sol#53) is not in mixedCase
Parameter DutchAuction.initMarket(bytes)._data (contracts/Auctions/DutchAuction.sol#78) is not in mixedCase
Parameter DutchAuction.getAuctionInitData(address,address,uint256,uint256,uint256,address,uint256,uint256,address)._funder (contracts/Auctions/DutchAuction.sol#105) is not in mixedCase
Parameter DutchAuction.getAuctionInitData(address,address,uint256,uint256,uint256,address,uint256,uint256,address)._token (contracts/Auctions/DutchAuction.sol#106) is not in mixedCase
Parameter DutchAuction.getAuctionInitData(address,address,uint256,uint256,uint256,address,uint256,uint256,address)._totalTokens (contracts/Auctions/DutchAuction.sol#107) is not in mixedCase
Parameter DutchAuction.getAuctionInitData(address,address,uint256,uint256,uint256,address,uint256,uint256,address)._startTime (contracts/Auctions/DutchAuction.sol#108) is not in mixedCase
Parameter DutchAuction.getAuctionInitData(address,address,uint256,uint256,uint256,address,uint256,uint256,address)._endTime (contracts/Auctions/DutchAuction.sol#109) is not in mixedCase
Parameter DutchAuction.getAuctionInitData(address,address,uint256,uint256,uint256,address,uint256,uint256,address)._paymentCurrency (contracts/Auctions/DutchAuction.sol#110) is not in mixedCase
Parameter DutchAuction.getAuctionInitData(address,address,uint256,uint256,uint256,address,uint256,uint256,address)._startPrice (contracts/Auctions/DutchAuction.sol#111) is not in mixedCase
Parameter DutchAuction.getAuctionInitData(address,address,uint256,uint256,uint256,address,uint256,uint256,address)._minimumPrice (contracts/Auctions/DutchAuction.sol#112) is not in mixedCase
Parameter DutchAuction.getAuctionInitData(address,address,uint256,uint256,uint256,address,uint256,uint256,address)._wallet (contracts/Auctions/DutchAuction.sol#113) is not in mixedCase
Parameter DutchAuction.commitEth(address)._from (contracts/Auctions/DutchAuction.sol#144) is not in mixedCase
Parameter DutchAuction.commitTokens(uint256)._amount (contracts/Auctions/DutchAuction.sol#161) is not in mixedCase
Parameter DutchAuction.commitTokensFrom(address,uint256)._from (contracts/Auctions/DutchAuction.sol#166) is not in mixedCase
Parameter DutchAuction.commitTokensFrom(address,uint256)._amount (contracts/Auctions/DutchAuction.sol#166) is not in mixedCase
Parameter DutchAuction.tokensClaimable(address)._user (contracts/Auctions/DutchAuction.sol#266) is not in mixedCase
Parameter DutchAuction.calculateCommitment(uint256)._commitment (contracts/Auctions/DutchAuction.sol#278) is not in mixedCase
Constant DutchAuction.marketTemplate (contracts/Auctions/DutchAuction.sol#28) is not in UPPER_CASE_WITH_UNDERSCORES
Parameter MISOMasterChef.initFarm(address,uint256,uint256,address,address)._rewards (contracts/Farms/MISOMasterChef.sol#91) is not in mixedCase
Parameter MISOMasterChef.initFarm(address,uint256,uint256,address,address)._rewardsPerBlock (contracts/Farms/MISOMasterChef.sol#92) is not in mixedCase
Parameter MISOMasterChef.initFarm(address,uint256,uint256,address,address)._startBlock (contracts/Farms/MISOMasterChef.sol#93) is not in mixedCase
Parameter MISOMasterChef.initFarm(address,uint256,uint256,address,address)._devaddr (contracts/Farms/MISOMasterChef.sol#94) is not in mixedCase
Parameter MISOMasterChef.initFarm(address,uint256,uint256,address,address)._admin (contracts/Farms/MISOMasterChef.sol#95) is not in mixedCase
Parameter MISOMasterChef.initFarm(bytes)._data (contracts/Farms/MISOMasterChef.sol#108) is not in mixedCase
Parameter MISOMasterChef.getInitData(address,uint256,uint256,address,address)._rewards (contracts/Farms/MISOMasterChef.sol#128) is not in mixedCase
Parameter MISOMasterChef.getInitData(address,uint256,uint256,address,address)._rewardsPerBlock (contracts/Farms/MISOMasterChef.sol#129) is not in mixedCase
Parameter MISOMasterChef.getInitData(address,uint256,uint256,address,address)._startBlock (contracts/Farms/MISOMasterChef.sol#130) is not in mixedCase
Parameter MISOMasterChef.getInitData(address,uint256,uint256,address,address)._divaddr (contracts/Farms/MISOMasterChef.sol#131) is not in mixedCase
Parameter MISOMasterChef.getInitData(address,uint256,uint256,address,address)._accessControls (contracts/Farms/MISOMasterChef.sol#132) is not in mixedCase
Parameter MISOMasterChef.setBonus(uint256,uint256)._bonusEndBlock (contracts/Farms/MISOMasterChef.sol#143) is not in mixedCase
Parameter MISOMasterChef.setBonus(uint256,uint256)._bonusMultiplier (contracts/Farms/MISOMasterChef.sol#144) is not in mixedCase
Parameter MISOMasterChef.addToken(uint256,IERC20,bool)._allocPoint (contracts/Farms/MISOMasterChef.sol#161) is not in mixedCase
Parameter MISOMasterChef.addToken(uint256,IERC20,bool)._lpToken (contracts/Farms/MISOMasterChef.sol#161) is not in mixedCase
Parameter MISOMasterChef.addToken(uint256,IERC20,bool)._withUpdate (contracts/Farms/MISOMasterChef.sol#161) is not in mixedCase
Parameter MISOMasterChef.set(uint256,uint256,bool)._pid (contracts/Farms/MISOMasterChef.sol#180) is not in mixedCase
Parameter MISOMasterChef.set(uint256,uint256,bool)._allocPoint (contracts/Farms/MISOMasterChef.sol#180) is not in mixedCase
Parameter MISOMasterChef.set(uint256,uint256,bool)._withUpdate (contracts/Farms/MISOMasterChef.sol#180) is not in mixedCase
Parameter MISOMasterChef.getMultiplier(uint256,uint256)._from (contracts/Farms/MISOMasterChef.sol#194) is not in mixedCase
Parameter MISOMasterChef.getMultiplier(uint256,uint256)._to (contracts/Farms/MISOMasterChef.sol#194) is not in mixedCase
Parameter MISOMasterChef.pendingRewards(uint256,address)._pid (contracts/Farms/MISOMasterChef.sol#207) is not in mixedCase
Parameter MISOMasterChef.pendingRewards(uint256,address)._user (contracts/Farms/MISOMasterChef.sol#207) is not in mixedCase
Parameter MISOMasterChef.updatePool(uint256)._pid (contracts/Farms/MISOMasterChef.sol#229) is not in mixedCase
Parameter MISOMasterChef.deposit(uint256,uint256)._pid (contracts/Farms/MISOMasterChef.sol#249) is not in mixedCase
Parameter MISOMasterChef.deposit(uint256,uint256)._amount (contracts/Farms/MISOMasterChef.sol#249) is not in mixedCase
Parameter MISOMasterChef.withdraw(uint256,uint256)._pid (contracts/Farms/MISOMasterChef.sol#268) is not in mixedCase
Parameter MISOMasterChef.withdraw(uint256,uint256)._amount (contracts/Farms/MISOMasterChef.sol#268) is not in mixedCase
Parameter MISOMasterChef.emergencyWithdraw(uint256)._pid (contracts/Farms/MISOMasterChef.sol#286) is not in mixedCase
Parameter MISOMasterChef.safeRewardsTransfer(address,uint256)._to (contracts/Farms/MISOMasterChef.sol#297) is not in mixedCase
Parameter MISOMasterChef.safeRewardsTransfer(address,uint256)._amount (contracts/Farms/MISOMasterChef.sol#297) is not in mixedCase
Parameter MISOMasterChef.dev(address)._devaddr (contracts/Farms/MISOMasterChef.sol#326) is not in mixedCase
Constant MISOMasterChef.farmTemplate (contracts/Farms/MISOMasterChef.sol#73) is not in UPPER_CASE_WITH_UNDERSCORES
Parameter MasterChef.initFarm(address,uint256,uint256,address,address)._rewards (contracts/Farms/MasterChef.sol#93) is not in mixedCase
Parameter MasterChef.initFarm(address,uint256,uint256,address,address)._rewardsPerBlock (contracts/Farms/MasterChef.sol#94) is not in mixedCase
Parameter MasterChef.initFarm(address,uint256,uint256,address,address)._startBlock (contracts/Farms/MasterChef.sol#95) is not in mixedCase
Parameter MasterChef.initFarm(address,uint256,uint256,address,address)._devaddr (contracts/Farms/MasterChef.sol#96) is not in mixedCase
Parameter MasterChef.initFarm(address,uint256,uint256,address,address)._accessControls (contracts/Farms/MasterChef.sol#97) is not in mixedCase
Parameter MasterChef.initFarm(bytes)._data (contracts/Farms/MasterChef.sol#111) is not in mixedCase
Parameter MasterChef.getInitData(address,uint256,uint256,address,address)._rewards (contracts/Farms/MasterChef.sol#130) is not in mixedCase
Parameter MasterChef.getInitData(address,uint256,uint256,address,address)._rewardsPerBlock (contracts/Farms/MasterChef.sol#131) is not in mixedCase
Parameter MasterChef.getInitData(address,uint256,uint256,address,address)._startBlock (contracts/Farms/MasterChef.sol#132) is not in mixedCase
Parameter MasterChef.getInitData(address,uint256,uint256,address,address)._divaddr (contracts/Farms/MasterChef.sol#133) is not in mixedCase
Parameter MasterChef.getInitData(address,uint256,uint256,address,address)._accessControls (contracts/Farms/MasterChef.sol#134) is not in mixedCase
Parameter MasterChef.setBonus(uint256,uint256)._bonusEndBlock (contracts/Farms/MasterChef.sol#144) is not in mixedCase
Parameter MasterChef.setBonus(uint256,uint256)._bonusMultiplier (contracts/Farms/MasterChef.sol#145) is not in mixedCase
Parameter MasterChef.addToken(uint256,IERC20,bool)._allocPoint (contracts/Farms/MasterChef.sol#162) is not in mixedCase
Parameter MasterChef.addToken(uint256,IERC20,bool)._lpToken (contracts/Farms/MasterChef.sol#162) is not in mixedCase
Parameter MasterChef.addToken(uint256,IERC20,bool)._withUpdate (contracts/Farms/MasterChef.sol#162) is not in mixedCase
Parameter MasterChef.set(uint256,uint256,bool)._pid (contracts/Farms/MasterChef.sol#181) is not in mixedCase
Parameter MasterChef.set(uint256,uint256,bool)._allocPoint (contracts/Farms/MasterChef.sol#181) is not in mixedCase
Parameter MasterChef.set(uint256,uint256,bool)._withUpdate (contracts/Farms/MasterChef.sol#181) is not in mixedCase
Parameter MasterChef.getMultiplier(uint256,uint256)._from (contracts/Farms/MasterChef.sol#195) is not in mixedCase
Parameter MasterChef.getMultiplier(uint256,uint256)._to (contracts/Farms/MasterChef.sol#195) is not in mixedCase
Parameter MasterChef.pendingRewards(uint256,address)._pid (contracts/Farms/MasterChef.sol#208) is not in mixedCase
Parameter MasterChef.pendingRewards(uint256,address)._user (contracts/Farms/MasterChef.sol#208) is not in mixedCase
Parameter MasterChef.updatePool(uint256)._pid (contracts/Farms/MasterChef.sol#230) is not in mixedCase
Parameter MasterChef.deposit(uint256,uint256)._pid (contracts/Farms/MasterChef.sol#250) is not in mixedCase
Parameter MasterChef.deposit(uint256,uint256)._amount (contracts/Farms/MasterChef.sol#250) is not in mixedCase
Parameter MasterChef.withdraw(uint256,uint256)._pid (contracts/Farms/MasterChef.sol#269) is not in mixedCase
Parameter MasterChef.withdraw(uint256,uint256)._amount (contracts/Farms/MasterChef.sol#269) is not in mixedCase
Parameter MasterChef.emergencyWithdraw(uint256)._pid (contracts/Farms/MasterChef.sol#287) is not in mixedCase
Parameter MasterChef.safeRewardsTransfer(address,uint256)._to (contracts/Farms/MasterChef.sol#298) is not in mixedCase
Parameter MasterChef.safeRewardsTransfer(address,uint256)._amount (contracts/Farms/MasterChef.sol#298) is not in mixedCase
Parameter MasterChef.dev(address)._devaddr (contracts/Farms/MasterChef.sol#327) is not in mixedCase
Constant MasterChef.farmTemplate (contracts/Farms/MasterChef.sol#75) is not in UPPER_CASE_WITH_UNDERSCORES
Parameter LiquidityZAP.initUniswapZAP(address,address,address).WETH (contracts/Liquidity/LiquidityZAP.sol#44) is not in mixedCase
Variable LiquidityZAP._token (contracts/Liquidity/LiquidityZAP.sol#39) is not in mixedCase
Variable LiquidityZAP._tokenWETHPair (contracts/Liquidity/LiquidityZAP.sol#40) is not in mixedCase
Variable LiquidityZAP._WETH (contracts/Liquidity/LiquidityZAP.sol#41) is not in mixedCase
Parameter PoolLiquidity.initPoolLiquidity(address,address,address,address,address,address,uint256,uint256,uint256)._accessControls (contracts/Liquidity/PoolLiquidity.sol#50) is not in mixedCase
Parameter PoolLiquidity.initPoolLiquidity(address,address,address,address,address,address,uint256,uint256,uint256)._token (contracts/Liquidity/PoolLiquidity.sol#51) is not in mixedCase
Parameter PoolLiquidity.initPoolLiquidity(address,address,address,address,address,address,uint256,uint256,uint256)._WETH (contracts/Liquidity/PoolLiquidity.sol#52) is not in mixedCase
Parameter PoolLiquidity.initPoolLiquidity(address,address,address,address,address,address,uint256,uint256,uint256)._factory (contracts/Liquidity/PoolLiquidity.sol#53) is not in mixedCase
Parameter PoolLiquidity.initPoolLiquidity(address,address,address,address,address,address,uint256,uint256,uint256)._owner (contracts/Liquidity/PoolLiquidity.sol#54) is not in mixedCase
Parameter PoolLiquidity.initPoolLiquidity(address,address,address,address,address,address,uint256,uint256,uint256)._wallet (contracts/Liquidity/PoolLiquidity.sol#55) is not in mixedCase
Parameter PoolLiquidity.initPoolLiquidity(address,address,address,address,address,address,uint256,uint256,uint256)._deadline (contracts/Liquidity/PoolLiquidity.sol#56) is not in mixedCase
Parameter PoolLiquidity.initPoolLiquidity(address,address,address,address,address,address,uint256,uint256,uint256)._launchwindow (contracts/Liquidity/PoolLiquidity.sol#57) is not in mixedCase
Parameter PoolLiquidity.initPoolLiquidity(address,address,address,address,address,address,uint256,uint256,uint256)._locktime (contracts/Liquidity/PoolLiquidity.sol#58) is not in mixedCase
Variable PoolLiquidity.WETH (contracts/Liquidity/PoolLiquidity.sol#26) is not in mixedCase
Constant PoolLiquidity.liquidityTemplate (contracts/Liquidity/PoolLiquidity.sol#41) is not in UPPER_CASE_WITH_UNDERSCORES
Parameter MISOFarmFactory.initMISOFarmFactory(address,address,uint256,uint256)._accessControls (contracts/MISOFarmFactory.sol#56) is not in mixedCase
Parameter MISOFarmFactory.initMISOFarmFactory(address,address,uint256,uint256)._misoDiv (contracts/MISOFarmFactory.sol#57) is not in mixedCase
Parameter MISOFarmFactory.initMISOFarmFactory(address,address,uint256,uint256)._minimumFee (contracts/MISOFarmFactory.sol#58) is not in mixedCase
Parameter MISOFarmFactory.initMISOFarmFactory(address,address,uint256,uint256)._tokenFee (contracts/MISOFarmFactory.sol#59) is not in mixedCase
Parameter MISOFarmFactory.setMinimumFee(uint256)._amount (contracts/MISOFarmFactory.sol#73) is not in mixedCase
Parameter MISOFarmFactory.setTokenFee(uint256)._amount (contracts/MISOFarmFactory.sol#81) is not in mixedCase
Parameter MISOFarmFactory.setDividends(address)._divaddr (contracts/MISOFarmFactory.sol#89) is not in mixedCase
Parameter MISOFarmFactory.deployFarm(uint256)._templateId (contracts/MISOFarmFactory.sol#102) is not in mixedCase
Parameter MISOFarmFactory.createFarm(uint256,bytes)._templateId (contracts/MISOFarmFactory.sol#126) is not in mixedCase
Parameter MISOFarmFactory.createFarm(uint256,bytes)._data (contracts/MISOFarmFactory.sol#127) is not in mixedCase
Parameter MISOFarmFactory.addFarmTemplate(address)._template (contracts/MISOFarmFactory.sol#143) is not in mixedCase
Parameter MISOFarmFactory.removeFarmTemplate(uint256)._templateId (contracts/MISOFarmFactory.sol#160) is not in mixedCase
Parameter MISOFarmFactory.getFarmTemplate(uint256)._farmTemplate (contracts/MISOFarmFactory.sol#174) is not in mixedCase
Parameter MISOFarmFactory.getTemplateId(address)._farmTemplate (contracts/MISOFarmFactory.sol#179) is not in mixedCase
Function MISOFermenter._initMISOFermenter(address) (contracts/MISOFermenter.sol#48-53) is not in mixedCase
Parameter MISOFermenter._initMISOFermenter(address)._accessControls (contracts/MISOFermenter.sol#48) is not in mixedCase
Parameter MISOFermenter.createEscrow(uint256)._templateId (contracts/MISOFermenter.sol#59) is not in mixedCase
Parameter MISOFermenter.addEscrowTemplate(address)._escrowTemplate (contracts/MISOFermenter.sol#73) is not in mixedCase
Parameter MISOFermenter.removeEscrowTemplate(uint256)._templateId (contracts/MISOFermenter.sol#88) is not in mixedCase
Parameter MISOFermenter.getEscrowTemplate(uint256)._templateId (contracts/MISOFermenter.sol#96) is not in mixedCase
Parameter MISOLiquidityLauncher.initMISOLiquidityLauncher(address,address)._accessControls (contracts/MISOLiquidityLauncher.sol#49) is not in mixedCase
Parameter MISOLiquidityLauncher.initMISOLiquidityLauncher(address,address)._WETH (contracts/MISOLiquidityLauncher.sol#49) is not in mixedCase
Parameter MISOLiquidityLauncher.createLiquidityLauncher(uint256)._templateId (contracts/MISOLiquidityLauncher.sol#61) is not in mixedCase
Parameter MISOLiquidityLauncher.addLiquidityLauncherTemplate(address)._template (contracts/MISOLiquidityLauncher.sol#78) is not in mixedCase
Parameter MISOLiquidityLauncher.removeLiquidityLauncherTemplate(uint256)._templateId (contracts/MISOLiquidityLauncher.sol#94) is not in mixedCase
Parameter MISOLiquidityLauncher.getTemplateId(address)._launcherTemplate (contracts/MISOLiquidityLauncher.sol#116) is not in mixedCase
Variable MISOLiquidityLauncher.WETH (contracts/MISOLiquidityLauncher.sol#22) is not in mixedCase
Parameter MISOMarket.initMISOMarket(address,address[])._accessControls (contracts/MISOMarket.sol#64) is not in mixedCase
Parameter MISOMarket.initMISOMarket(address,address[])._templates (contracts/MISOMarket.sol#64) is not in mixedCase
Parameter MISOMarket.setMinimumFee(uint256)._amount (contracts/MISOMarket.sol#77) is not in mixedCase
Parameter MISOMarket.setTokenFee(uint256)._amount (contracts/MISOMarket.sol#85) is not in mixedCase
Parameter MISOMarket.setDividends(address)._divaddr (contracts/MISOMarket.sol#93) is not in mixedCase
Parameter MISOMarket.deployMarket(uint256)._templateId (contracts/MISOMarket.sol#108) is not in mixedCase
Parameter MISOMarket.createMarket(uint256,address,uint256,bytes)._templateId (contracts/MISOMarket.sol#132) is not in mixedCase
Parameter MISOMarket.createMarket(uint256,address,uint256,bytes)._token (contracts/MISOMarket.sol#133) is not in mixedCase
Parameter MISOMarket.createMarket(uint256,address,uint256,bytes)._tokenSupply (contracts/MISOMarket.sol#134) is not in mixedCase
Parameter MISOMarket.createMarket(uint256,address,uint256,bytes)._data (contracts/MISOMarket.sol#135) is not in mixedCase
Parameter MISOMarket.addAuctionTemplate(address)._template (contracts/MISOMarket.sol#152) is not in mixedCase
Parameter MISOMarket.removeAuctionTemplate(uint256)._templateId (contracts/MISOMarket.sol#165) is not in mixedCase
Parameter MISOMarket.getAuctionTemplate(uint256)._templateId (contracts/MISOMarket.sol#189) is not in mixedCase
Parameter MISOMarket.getTemplateId(address)._auctionTemplate (contracts/MISOMarket.sol#194) is not in mixedCase
Parameter MISOSplitter.initMISOSplitter(address)._accessControls (contracts/MISOSplitter.sol#33) is not in mixedCase
Parameter MISOSplitter.setPoints(address,uint256)._recipient (contracts/MISOSplitter.sol#41) is not in mixedCase
Parameter MISOSplitter.setPoints(address,uint256)._points (contracts/MISOSplitter.sol#41) is not in mixedCase
Parameter MISOTokenFactory.initMISOTokenFactory(address)._accessControls (contracts/MISOTokenFactory.sol#67) is not in mixedCase
Parameter MISOTokenFactory.setMinimumFee(uint256)._amount (contracts/MISOTokenFactory.sol#74) is not in mixedCase
Parameter MISOTokenFactory.setTokenFee(uint256)._amount (contracts/MISOTokenFactory.sol#82) is not in mixedCase
Parameter MISOTokenFactory.setDividends(address)._divaddr (contracts/MISOTokenFactory.sol#90) is not in mixedCase
Parameter MISOTokenFactory.deployToken(uint256)._templateId (contracts/MISOTokenFactory.sol#104) is not in mixedCase
Parameter MISOTokenFactory.createToken(uint256,bytes)._templateId (contracts/MISOTokenFactory.sol#128) is not in mixedCase
Parameter MISOTokenFactory.createToken(uint256,bytes)._data (contracts/MISOTokenFactory.sol#129) is not in mixedCase
Parameter MISOTokenFactory.addTokenTemplate(address)._template (contracts/MISOTokenFactory.sol#150) is not in mixedCase
Parameter MISOTokenFactory.removeTokenTemplate(uint256)._templateId (contracts/MISOTokenFactory.sol#167) is not in mixedCase
Parameter MISOTokenFactory.getTokenTemplate(uint256)._templateId (contracts/MISOTokenFactory.sol#180) is not in mixedCase
Parameter MISOTokenFactory.getTemplateId(address)._tokenTemplate (contracts/MISOTokenFactory.sol#190) is not in mixedCase
Parameter IPoolLiquidity.initPoolLiquidity(address,address,address,address,address,address,uint256,uint256,uint256)._WETH (contracts/Recipes/MISORecipe01.sol#41) is not in mixedCase
Parameter MISORecipe01.prepareMiso(string,string,address)._name (contracts/Recipes/MISORecipe01.sol#117) is not in mixedCase
Parameter MISORecipe01.prepareMiso(string,string,address)._symbol (contracts/Recipes/MISORecipe01.sol#118) is not in mixedCase
Parameter SimpleContract.init(uint256,uint256,address,address)._startTime (contracts/SimpleConctract.sol#32) is not in mixedCase
Parameter SimpleContract.init(uint256,uint256,address,address)._endTime (contracts/SimpleConctract.sol#32) is not in mixedCase
Parameter SimpleContract.init(uint256,uint256,address,address)._token (contracts/SimpleConctract.sol#32) is not in mixedCase
Parameter SimpleContract.init(uint256,uint256,address,address)._wallet (contracts/SimpleConctract.sol#32) is not in mixedCase
Parameter SimpleContract.init(bytes32,bytes32,bytes32,bytes32)._startTime (contracts/SimpleConctract.sol#39) is not in mixedCase
Parameter SimpleContract.init(bytes32,bytes32,bytes32,bytes32)._endTime (contracts/SimpleConctract.sol#39) is not in mixedCase
Parameter SimpleContract.init(bytes32,bytes32,bytes32,bytes32)._token (contracts/SimpleConctract.sol#39) is not in mixedCase
Parameter SimpleContract.init(bytes32,bytes32,bytes32,bytes32)._wallet (contracts/SimpleConctract.sol#39) is not in mixedCase
Parameter SimpleContract.init(bytes32[])._bytesValues (contracts/SimpleConctract.sol#46) is not in mixedCase
Parameter SimpleContract.init(address[],uint256[])._addressValues (contracts/SimpleConctract.sol#65) is not in mixedCase
Parameter SimpleContract.init(address[],uint256[])._numberValues (contracts/SimpleConctract.sol#65) is not in mixedCase
Parameter SimpleContract.encode(address,uint256)._addr (contracts/SimpleConctract.sol#95) is not in mixedCase
Parameter SimpleContract.encode(address,uint256)._number (contracts/SimpleConctract.sol#95) is not in mixedCase
Parameter SimpleContract.decode(bytes)._data (contracts/SimpleConctract.sol#99) is not in mixedCase
Parameter FixedToken.initToken(string,string,address,uint256)._name (contracts/Tokens/FixedToken.sol#10) is not in mixedCase
Parameter FixedToken.initToken(string,string,address,uint256)._symbol (contracts/Tokens/FixedToken.sol#10) is not in mixedCase
Parameter FixedToken.initToken(string,string,address,uint256)._initialSupply (contracts/Tokens/FixedToken.sol#10) is not in mixedCase
Parameter FixedToken.initToken(bytes)._data (contracts/Tokens/FixedToken.sol#16) is not in mixedCase
Parameter FixedToken.getInitData(string,string,address,uint256)._name (contracts/Tokens/FixedToken.sol#34) is not in mixedCase
Parameter FixedToken.getInitData(string,string,address,uint256)._symbol (contracts/Tokens/FixedToken.sol#35) is not in mixedCase
Parameter FixedToken.getInitData(string,string,address,uint256)._owner (contracts/Tokens/FixedToken.sol#36) is not in mixedCase
Parameter FixedToken.getInitData(string,string,address,uint256)._initialSupply (contracts/Tokens/FixedToken.sol#37) is not in mixedCase
Parameter MintableToken.initToken(string,string,address,uint256)._name (contracts/Tokens/MintableToken.sol#13) is not in mixedCase
Parameter MintableToken.initToken(string,string,address,uint256)._symbol (contracts/Tokens/MintableToken.sol#13) is not in mixedCase
Parameter MintableToken.initToken(string,string,address,uint256)._owner (contracts/Tokens/MintableToken.sol#13) is not in mixedCase
Parameter MintableToken.initToken(string,string,address,uint256)._initialSupply (contracts/Tokens/MintableToken.sol#13) is not in mixedCase
Parameter MintableToken.initToken(bytes)._data (contracts/Tokens/MintableToken.sol#22) is not in mixedCase
Parameter MintableToken.getInitData(string,string,address,uint256)._name (contracts/Tokens/MintableToken.sol#40) is not in mixedCase
Parameter MintableToken.getInitData(string,string,address,uint256)._symbol (contracts/Tokens/MintableToken.sol#41) is not in mixedCase
Parameter MintableToken.getInitData(string,string,address,uint256)._owner (contracts/Tokens/MintableToken.sol#42) is not in mixedCase
Parameter MintableToken.getInitData(string,string,address,uint256)._initialSupply (contracts/Tokens/MintableToken.sol#43) is not in mixedCase
Parameter SushiToken.initToken(string,string,address,uint256)._name (contracts/Tokens/SushiToken.sol#16) is not in mixedCase
Parameter SushiToken.initToken(string,string,address,uint256)._symbol (contracts/Tokens/SushiToken.sol#16) is not in mixedCase
Parameter SushiToken.initToken(string,string,address,uint256)._owner (contracts/Tokens/SushiToken.sol#16) is not in mixedCase
Parameter SushiToken.initToken(string,string,address,uint256)._initialSupply (contracts/Tokens/SushiToken.sol#16) is not in mixedCase
Parameter SushiToken.initToken(bytes)._data (contracts/Tokens/SushiToken.sol#25) is not in mixedCase
Parameter SushiToken.getInitData(string,string,address,uint256)._name (contracts/Tokens/SushiToken.sol#43) is not in mixedCase
Parameter SushiToken.getInitData(string,string,address,uint256)._symbol (contracts/Tokens/SushiToken.sol#44) is not in mixedCase
Parameter SushiToken.getInitData(string,string,address,uint256)._owner (contracts/Tokens/SushiToken.sol#45) is not in mixedCase
Parameter SushiToken.getInitData(string,string,address,uint256)._initialSupply (contracts/Tokens/SushiToken.sol#46) is not in mixedCase
Parameter SushiToken.mint(address,uint256)._to (contracts/Tokens/SushiToken.sol#57) is not in mixedCase
Parameter SushiToken.mint(address,uint256)._amount (contracts/Tokens/SushiToken.sol#57) is not in mixedCase
Variable SushiToken._delegates (contracts/Tokens/SushiToken.sol#70) is not in mixedCase
Event POLContractonDeposit(address,uint256,uint256) (contracts/Unicrypt/POLContract.sol#9) is not in CapWords
Event POLContractonWithdraw(address,uint256) (contracts/Unicrypt/POLContract.sol#10) is not in CapWords
Parameter POLContract.depositToken(address,uint256,uint256).unlock_date (contracts/Unicrypt/POLContract.sol#86) is not in mixedCase
Variable UniswapV2ERC20.DOMAIN_SEPARATOR (contracts/UniswapV2/UniswapV2ERC20.sol#15) is not in mixedCase
Parameter UniswapV2Factory.setFeeTo(address)._feeTo (contracts/UniswapV2/UniswapV2Factory.sol#45) is not in mixedCase
Parameter UniswapV2Factory.setMigrator(address)._migrator (contracts/UniswapV2/UniswapV2Factory.sol#50) is not in mixedCase
Parameter UniswapV2Factory.setFeeToSetter(address)._feeToSetter (contracts/UniswapV2/UniswapV2Factory.sol#55) is not in mixedCase
Parameter UniswapV2Pair.initialize(address,address)._token0 (contracts/UniswapV2/UniswapV2Pair.sol#70) is not in mixedCase
Parameter UniswapV2Pair.initialize(address,address)._token1 (contracts/UniswapV2/UniswapV2Pair.sol#70) is not in mixedCase
Variable UniswapV2Router02.WETH (contracts/UniswapV2/UniswapV2Router02.sol#16) is not in mixedCase
Function IUniswapV2ERC20.DOMAIN_SEPARATOR() (contracts/UniswapV2/interfaces/IUniswapV2ERC20.sol#18) is not in mixedCase
Function IUniswapV2ERC20.PERMIT_TYPEHASH() (contracts/UniswapV2/interfaces/IUniswapV2ERC20.sol#19) is not in mixedCase
Function IUniswapV2Pair.DOMAIN_SEPARATOR() (contracts/UniswapV2/interfaces/IUniswapV2Pair.sol#18) is not in mixedCase
Function IUniswapV2Pair.PERMIT_TYPEHASH() (contracts/UniswapV2/interfaces/IUniswapV2Pair.sol#19) is not in mixedCase
Function IUniswapV2Pair.MINIMUM_LIQUIDITY() (contracts/UniswapV2/interfaces/IUniswapV2Pair.sol#36) is not in mixedCase
Function IUniswapV2Router01.WETH() (contracts/UniswapV2/interfaces/IUniswapV2Router01.sol#5) is not in mixedCase
Parameter Owned.transferOwnership(address)._newOwner (contracts/Utils/Owned.sol#32) is not in mixedCase
Variable Timelock.admin_initialized (contracts/Utils/Timelock.sol#31) is not in mixedCase
Parameter GnosisSafeFactory.initGnosisVault(address,address,address)._accessControls (contracts/Vault/GnosisSafeFactory.sol#24) is not in mixedCase
Parameter GnosisSafeFactory.initGnosisVault(address,address,address)._safeGnosis (contracts/Vault/GnosisSafeFactory.sol#24) is not in mixedCase
Parameter GnosisSafeFactory.initGnosisVault(address,address,address)._proxyFactory (contracts/Vault/GnosisSafeFactory.sol#24) is not in mixedCase
Parameter GnosisSafeFactory.setSafeGnosis(address)._safeGnosis (contracts/Vault/GnosisSafeFactory.sol#35) is not in mixedCase
Parameter GnosisSafeFactory.setProxyFactory(address)._proxyFactory (contracts/Vault/GnosisSafeFactory.sol#46) is not in mixedCase
Parameter GnosisSafeFactory.createSafe(address[],uint256,address,bytes,address,address,uint256,address)._owners (contracts/Vault/GnosisSafeFactory.sol#67) is not in mixedCase
Parameter GnosisSafeFactory.createSafe(address[],uint256,address,bytes,address,address,uint256,address)._threshold (contracts/Vault/GnosisSafeFactory.sol#68) is not in mixedCase
Parameter TokenLock.lockTokens(address,uint256,uint256)._tokenAddress (contracts/Vault/TokenLock.sol#30) is not in mixedCase
Parameter TokenLock.lockTokens(address,uint256,uint256)._amount (contracts/Vault/TokenLock.sol#30) is not in mixedCase
Parameter TokenLock.lockTokens(address,uint256,uint256)._unlockTime (contracts/Vault/TokenLock.sol#30) is not in mixedCase
Parameter TokenLock.withdrawTokens(uint256)._id (contracts/Vault/TokenLock.sol#53) is not in mixedCase
Parameter TokenLock.getTotalTokenBalance(address)._tokenAddress (contracts/Vault/TokenLock.sol#80) is not in mixedCase
Parameter TokenLock.getTokenBalanceByAddress(address,address)._tokenAddress (contracts/Vault/TokenLock.sol#86) is not in mixedCase
Parameter TokenLock.getTokenBalanceByAddress(address,address)._walletAddress (contracts/Vault/TokenLock.sol#86) is not in mixedCase
Parameter TokenLock.getDepositDetails(uint256)._id (contracts/Vault/TokenLock.sol#92) is not in mixedCase
Parameter TokenVault.add(IERC20,bool,uint256)._token (contracts/Vault/TokenVault.sol#36) is not in mixedCase
Parameter TokenVault.add(IERC20,bool,uint256)._withdrawable (contracts/Vault/TokenVault.sol#36) is not in mixedCase
Parameter TokenVault.add(IERC20,bool,uint256)._duration (contracts/Vault/TokenVault.sol#36) is not in mixedCase
Parameter TokenVault.setPoolWithdrawable(uint256,bool)._pid (contracts/Vault/TokenVault.sol#54) is not in mixedCase
Parameter TokenVault.setPoolWithdrawable(uint256,bool)._withdrawable (contracts/Vault/TokenVault.sol#54) is not in mixedCase
Parameter TokenVault.updatePoolEndDate(uint256,uint256)._pid (contracts/Vault/TokenVault.sol#60) is not in mixedCase
Parameter TokenVault.updatePoolEndDate(uint256,uint256)._endDate (contracts/Vault/TokenVault.sol#60) is not in mixedCase
Parameter TokenVault.deposit(address,uint256,address)._token (contracts/Vault/TokenVault.sol#69) is not in mixedCase
Parameter TokenVault.deposit(address,uint256,address)._amount (contracts/Vault/TokenVault.sol#69) is not in mixedCase
Parameter TokenVault.deposit(address,uint256,address)._withdrawAddress (contracts/Vault/TokenVault.sol#69) is not in mixedCase
Parameter TokenVault.withdraw(uint256,uint256)._pid (contracts/Vault/TokenVault.sol#79) is not in mixedCase
Parameter TokenVault.withdraw(uint256,uint256)._amount (contracts/Vault/TokenVault.sol#79) is not in mixedCase
Parameter IMisoLiquidity.initMisoLiquidity(address,address,address,address,address,uint256,uint256,uint256)._WETH (contracts/interfaces/IMisoLiquidity.sol#6) is not in mixedCase
Event IUnicryptonDeposit(address,uint256,uint256) (contracts/interfaces/IUnicrypt.sol#5) is not in CapWords
Event IUnicryptonWithdraw(address,uint256) (contracts/interfaces/IUnicrypt.sol#6) is not in CapWords
Parameter IUnicrypt.depositToken(address,uint256,uint256).unlock_date (contracts/interfaces/IUnicrypt.sol#13) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Redundant expression "this (contracts/Auctions/Crowdsale.sol#236)" inCrowdsale (contracts/Auctions/Crowdsale.sol#9-412)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements

Reentrancy in Crowdsale.finalize() (contracts/Auctions/Crowdsale.sol#298-321):
	External calls:
	- _forwardFunds() (contracts/Auctions/Crowdsale.sol#308)
		- wallet.transfer(address(this).balance) (contracts/Auctions/Crowdsale.sol#341)
	State variables written after the call(s):
	- finalized = true (contracts/Auctions/Crowdsale.sol#318)
	Event emitted after the call(s):
	- CrowdsaleFinalized() (contracts/Auctions/Crowdsale.sol#320)
Reentrancy in BatchAuction.finalizeAuction() (contracts/Auctions/BatchAuction.sol#92-107):
	External calls:
	- _tokenPayment(paymentCurrency,wallet,commitmentsTotal) (contracts/Auctions/BatchAuction.sol#99)
		- _to.transfer(_amount) (contracts/Auctions/BatchAuction.sol#175)
	- _tokenPayment(auctionToken,wallet,totalTokens) (contracts/Auctions/BatchAuction.sol#104)
		- _to.transfer(_amount) (contracts/Auctions/BatchAuction.sol#175)
	State variables written after the call(s):
	- finalized = true (contracts/Auctions/BatchAuction.sol#106)
Reentrancy in DutchAuction.finalizeAuction() (contracts/Auctions/DutchAuction.sol#186-200):
	External calls:
	- _tokenPayment(paymentCurrency,wallet,commitmentsTotal) (contracts/Auctions/DutchAuction.sol#192)
		- _to.transfer(_amount) (contracts/Auctions/DutchAuction.sol#319)
	- _tokenPayment(auctionToken,wallet,totalTokens) (contracts/Auctions/DutchAuction.sol#197)
		- _to.transfer(_amount) (contracts/Auctions/DutchAuction.sol#319)
	State variables written after the call(s):
	- finalized = true (contracts/Auctions/DutchAuction.sol#199)
Reentrancy in WETH9.withdraw(uint256) (contracts/Utils/WETH9.sol#38-43):
	External calls:
	- msg.sender.transfer(wad) (contracts/Utils/WETH9.sol#41)
	Event emitted after the call(s):
	- Withdrawal(msg.sender,wad) (contracts/Utils/WETH9.sol#42)
Reentrancy in Crowdsale.withdrawTokens(address) (contracts/Auctions/Crowdsale.sol#265-281):
	External calls:
	- beneficiary.transfer(claimAmount) (contracts/Auctions/Crowdsale.sol#278)
	State variables written after the call(s):
	- balances[beneficiary] = 0 (contracts/Auctions/Crowdsale.sol#280)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

Variable BatchAuction._addCommitment(address,uint256)._commitment (contracts/Auctions/BatchAuction.sol#153) is too similar to BatchAuction.commitments (contracts/Auctions/BatchAuction.sol#21)
Variable DutchAuction._addCommitment(address,uint256)._commitment (contracts/Auctions/DutchAuction.sol#301) is too similar to DutchAuction.commitments (contracts/Auctions/DutchAuction.sol#24)
Variable DutchAuction.calculateCommitment(uint256)._commitment (contracts/Auctions/DutchAuction.sol#278) is too similar to DutchAuction.commitments (contracts/Auctions/DutchAuction.sol#24)
Variable MISOFarmFactory.getFarmTemplate(uint256)._farmTemplate (contracts/MISOFarmFactory.sol#174) is too similar to MISOFarmFactory.farmTemplates (contracts/MISOFarmFactory.sol#22)
Variable MISOFarmFactory.getTemplateId(address)._farmTemplate (contracts/MISOFarmFactory.sol#179) is too similar to MISOFarmFactory.farmTemplates (contracts/MISOFarmFactory.sol#22)
Variable MISOFermenter.addEscrowTemplate(address)._escrowTemplate (contracts/MISOFermenter.sol#73) is too similar to MISOFermenter.escrowTemplates (contracts/MISOFermenter.sol#26)
Variable MISOFermenter.getTemplateId(address)._escrowTemplate (contracts/MISOFermenter.sol#105) is too similar to MISOFermenter.escrowTemplates (contracts/MISOFermenter.sol#26)
Variable MISOLiquidityLauncher.getTemplateId(address)._launcherTemplate (contracts/MISOLiquidityLauncher.sol#116) is too similar to MISOLiquidityLauncher.launcherTemplates (contracts/MISOLiquidityLauncher.sol#25)
Variable MISOMarket.getTemplateId(address)._auctionTemplate (contracts/MISOMarket.sol#194) is too similar to MISOMarket.auctionTemplates (contracts/MISOMarket.sol#30)
Variable MISOTokenFactory.getTemplateId(address)._tokenTemplate (contracts/MISOTokenFactory.sol#190) is too similar to MISOTokenFactory.tokenTemplates (contracts/MISOTokenFactory.sol#33)
Variable UniswapV2Pair.swap(uint256,uint256,address,bytes).balance0Adjusted (contracts/UniswapV2/UniswapV2Pair.sol#191) is too similar to UniswapV2Pair.swap(uint256,uint256,address,bytes).balance1Adjusted (contracts/UniswapV2/UniswapV2Pair.sol#192)
Variable UniswapV2Pair.price0CumulativeLast (contracts/UniswapV2/UniswapV2Pair.sol#30) is too similar to UniswapV2Pair.price1CumulativeLast (contracts/UniswapV2/UniswapV2Pair.sol#31)
Variable UniswapV2Router02._addLiquidity(address,address,uint256,uint256,uint256,uint256).amountADesired (contracts/UniswapV2/UniswapV2Router02.sol#36) is too similar to UniswapV2Router02._addLiquidity(address,address,uint256,uint256,uint256,uint256).amountBDesired (contracts/UniswapV2/UniswapV2Router02.sol#37)
Variable UniswapV2Router02.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountADesired (contracts/UniswapV2/UniswapV2Router02.sol#64) is too similar to UniswapV2Router02.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountBDesired (contracts/UniswapV2/UniswapV2Router02.sol#65)
Variable UniswapV2Router02.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountADesired (contracts/UniswapV2/UniswapV2Router02.sol#64) is too similar to IUniswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountBDesired (contracts/UniswapV2/interfaces/IUniswapV2Router01.sol#11)
Variable UniswapV2Router02._addLiquidity(address,address,uint256,uint256,uint256,uint256).amountADesired (contracts/UniswapV2/UniswapV2Router02.sol#36) is too similar to UniswapV2Router02.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountBDesired (contracts/UniswapV2/UniswapV2Router02.sol#65)
Variable UniswapV2Router02._addLiquidity(address,address,uint256,uint256,uint256,uint256).amountADesired (contracts/UniswapV2/UniswapV2Router02.sol#36) is too similar to IUniswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountBDesired (contracts/UniswapV2/interfaces/IUniswapV2Router01.sol#11)
Variable IUniswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountADesired (contracts/UniswapV2/interfaces/IUniswapV2Router01.sol#10) is too similar to IUniswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountBDesired (contracts/UniswapV2/interfaces/IUniswapV2Router01.sol#11)
Variable IUniswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountADesired (contracts/UniswapV2/interfaces/IUniswapV2Router01.sol#10) is too similar to UniswapV2Router02.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountBDesired (contracts/UniswapV2/UniswapV2Router02.sol#65)
Variable UniswapV2Router02.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountADesired (contracts/UniswapV2/UniswapV2Router02.sol#64) is too similar to UniswapV2Router02._addLiquidity(address,address,uint256,uint256,uint256,uint256).amountBDesired (contracts/UniswapV2/UniswapV2Router02.sol#37)
Variable IUniswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountADesired (contracts/UniswapV2/interfaces/IUniswapV2Router01.sol#10) is too similar to UniswapV2Router02._addLiquidity(address,address,uint256,uint256,uint256,uint256).amountBDesired (contracts/UniswapV2/UniswapV2Router02.sol#37)
Variable UniswapV2Router02._addLiquidity(address,address,uint256,uint256,uint256,uint256).amountAOptimal (contracts/UniswapV2/UniswapV2Router02.sol#54) is too similar to UniswapV2Router02._addLiquidity(address,address,uint256,uint256,uint256,uint256).amountBOptimal (contracts/UniswapV2/UniswapV2Router02.sol#49)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-are-too-similar

CloneFactory.createClone(address) (contracts/Utils/CloneFactory.sol#34-43) uses literals with too many digits:
	- mstore(uint256,uint256)(clone_createClone_asm_0,0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000) (contracts/Utils/CloneFactory.sol#38)
CloneFactory.createClone(address) (contracts/Utils/CloneFactory.sol#34-43) uses literals with too many digits:
	- mstore(uint256,uint256)(clone_createClone_asm_0 + 0x28,0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000) (contracts/Utils/CloneFactory.sol#40)
CloneFactory.isClone(address,address) (contracts/Utils/CloneFactory.sol#45-60) uses literals with too many digits:
	- mstore(uint256,uint256)(clone_isClone_asm_0,0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000) (contracts/Utils/CloneFactory.sol#49)
CloneFactory.isClone(address,address) (contracts/Utils/CloneFactory.sol#45-60) uses literals with too many digits:
	- mstore(uint256,uint256)(clone_isClone_asm_0 + 0x1e,0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000) (contracts/Utils/CloneFactory.sol#51)
PoolLiquidity.initPoolLiquidity(address,address,address,address,address,address,uint256,uint256,uint256) (contracts/Liquidity/PoolLiquidity.sol#49-77) uses literals with too many digits:
	- require(bool,string)(_locktime < 10000000000,Enter an unix timestamp in seconds, not miliseconds) (contracts/Liquidity/PoolLiquidity.sol#62)
POLContract.depositToken(address,uint256,uint256) (contracts/Unicrypt/POLContract.sol#86-114) uses literals with too many digits:
	- require(bool,string)(unlock_date < 10000000000,Enter an unix timestamp in seconds, not miliseconds) (contracts/Unicrypt/POLContract.sol#87)
UniswapV2Factory.pairCodeHash() (contracts/UniswapV2/UniswapV2Factory.sol#24-26) uses literals with too many digits:
	- keccak256(bytes)(type()(UniswapV2Pair).creationCode) (contracts/UniswapV2/UniswapV2Factory.sol#25)
UniswapV2Factory.createPair(address,address) (contracts/UniswapV2/UniswapV2Factory.sol#28-43) uses literals with too many digits:
	- bytecode = type()(UniswapV2Pair).creationCode (contracts/UniswapV2/UniswapV2Factory.sol#33)
TokenLock.lockTokens(address,uint256,uint256) (contracts/Vault/TokenLock.sol#30-48) uses literals with too many digits:
	- require(bool,string)(_unlockTime < 10000000000,Enter an unix timestamp in seconds, not miliseconds) (contracts/Vault/TokenLock.sol#32)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

MISOMasterChef.devPercentage (contracts/Farms/MISOMasterChef.sol#62) should be constant
MasterChef.devPercentage (contracts/Farms/MasterChef.sol#64) should be constant
WETH9.decimals (contracts/Utils/WETH9.sol#21) should be constant
WETH9.name (contracts/Utils/WETH9.sol#19) should be constant
WETH9.symbol (contracts/Utils/WETH9.sol#20) should be constant
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

hasMinterRole(address) should be declared external:
	- MISOAccessControls.hasMinterRole(address) (contracts/Access/MISOAccessControls.sol#64-66)
hasSmartContractRole(address) should be declared external:
	- MISOAccessControls.hasSmartContractRole(address) (contracts/Access/MISOAccessControls.sol#73-75)
numberOfChildren() should be declared external:
	- MISOAccessFactory.numberOfChildren() (contracts/Access/MISOAccessFactory.sol#57-59)
setDev(address) should be declared external:
	- MISOAccessFactory.setDev(address) (contracts/Access/MISOAccessFactory.sol#95-102)
setMinimumFee(uint256) should be declared external:
	- MISOAccessFactory.setMinimumFee(uint256) (contracts/Access/MISOAccessFactory.sol#104-111)
initPointList(address) should be declared external:
	- PointList.initPointList(address) (contracts/Access/PointList.sol#28-32)
isInPointList(address) should be declared external:
	- PointList.isInPointList(address) (contracts/Access/PointList.sol#34-36)
initWhiteList(address) should be declared external:
	- WhiteList.initWhiteList(address) (contracts/Access/WhiteList.sol#29-33)
isInWhiteList(address) should be declared external:
	- WhiteList.isInWhiteList(address) (contracts/Access/WhiteList.sol#35-37)
addWhiteList(address[]) should be declared external:
	- WhiteList.addWhiteList(address[]) (contracts/Access/WhiteList.sol#39-52)
removeWhiteList(address[]) should be declared external:
	- WhiteList.removeWhiteList(address[]) (contracts/Access/WhiteList.sol#53-65)
initWhiteListFactory(address,uint256) should be declared external:
	- WhiteListFactory.initWhiteListFactory(address,uint256) (contracts/Access/WhiteListFactory.sol#34-38)
numberOfChildren() should be declared external:
	- WhiteListFactory.numberOfChildren() (contracts/Access/WhiteListFactory.sol#40-42)
deprecateFactory(address) should be declared external:
	- WhiteListFactory.deprecateFactory(address) (contracts/Access/WhiteListFactory.sol#43-48)
setMinimumFee(uint256) should be declared external:
	- WhiteListFactory.setMinimumFee(uint256) (contracts/Access/WhiteListFactory.sol#49-53)
deployWhiteList(address,address[]) should be declared external:
	- WhiteListFactory.deployWhiteList(address,address[]) (contracts/Access/WhiteListFactory.sol#55-72)
transferAnyERC20Token(address,uint256) should be declared external:
	- WhiteListFactory.transferAnyERC20Token(address,uint256) (contracts/Access/WhiteListFactory.sol#75-78)
commitTokens(uint256) should be declared external:
	- BatchAuction.commitTokens(uint256) (contracts/Auctions/BatchAuction.sol#70-72)
finalizeAuction() should be declared external:
	- BatchAuction.finalizeAuction() (contracts/Auctions/BatchAuction.sol#92-107)
withdrawTokens() should be declared external:
	- BatchAuction.withdrawTokens() (contracts/Auctions/BatchAuction.sol#110-127)
tokenPrice() should be declared external:
	- BatchAuction.tokenPrice() (contracts/Auctions/BatchAuction.sol#129-132)
auctionEnded() should be declared external:
	- BatchAuction.auctionEnded() (contracts/Auctions/BatchAuction.sol#148-150)
initMarket(bytes) should be declared external:
	- Crowdsale.initMarket(bytes) (contracts/Auctions/Crowdsale.sol#123-150)
buyTokens(address,uint256) should be declared external:
	- Crowdsale.buyTokens(address,uint256) (contracts/Auctions/Crowdsale.sol#199-204)
withdrawTokens(address) should be declared external:
	- Crowdsale.withdrawTokens(address) (contracts/Auctions/Crowdsale.sol#265-281)
finalize() should be declared external:
	- Crowdsale.finalize() (contracts/Auctions/Crowdsale.sol#298-321)
balanceOf(address) should be declared external:
	- Crowdsale.balanceOf(address) (contracts/Auctions/Crowdsale.sol#357-359)
initMarket(bytes) should be declared external:
	- DutchAuction.initMarket(bytes) (contracts/Auctions/DutchAuction.sol#77-102)
commitTokens(uint256) should be declared external:
	- DutchAuction.commitTokens(uint256) (contracts/Auctions/DutchAuction.sol#161-163)
finalizeAuction() should be declared external:
	- DutchAuction.finalizeAuction() (contracts/Auctions/DutchAuction.sol#186-200)
withdrawTokens() should be declared external:
	- DutchAuction.withdrawTokens() (contracts/Auctions/DutchAuction.sol#203-220)
totalTokensCommitted() should be declared external:
	- DutchAuction.totalTokensCommitted() (contracts/Auctions/DutchAuction.sol#273-275)
auctionEnded() should be declared external:
	- DutchAuction.auctionEnded() (contracts/Auctions/DutchAuction.sol#296-298)
initFarm(bytes) should be declared external:
	- MISOMasterChef.initFarm(bytes) (contracts/Farms/MISOMasterChef.sol#107-116)
	- MasterChef.initFarm(bytes) (contracts/Farms/MasterChef.sol#110-119)
setBonus(uint256,uint256) should be declared external:
	- MISOMasterChef.setBonus(uint256,uint256) (contracts/Farms/MISOMasterChef.sol#142-153)
addToken(uint256,IERC20,bool) should be declared external:
	- MISOMasterChef.addToken(uint256,IERC20,bool) (contracts/Farms/MISOMasterChef.sol#161-177)
set(uint256,uint256,bool) should be declared external:
	- MISOMasterChef.set(uint256,uint256,bool) (contracts/Farms/MISOMasterChef.sol#180-190)
deposit(uint256,uint256) should be declared external:
	- MISOMasterChef.deposit(uint256,uint256) (contracts/Farms/MISOMasterChef.sol#249-265)
withdraw(uint256,uint256) should be declared external:
	- MISOMasterChef.withdraw(uint256,uint256) (contracts/Farms/MISOMasterChef.sol#268-283)
emergencyWithdraw(uint256) should be declared external:
	- MISOMasterChef.emergencyWithdraw(uint256) (contracts/Farms/MISOMasterChef.sol#286-294)
blocksRemaining() should be declared external:
	- MISOMasterChef.blocksRemaining() (contracts/Farms/MISOMasterChef.sol#307-314)
claimTips() should be declared external:
	- MISOMasterChef.claimTips() (contracts/Farms/MISOMasterChef.sol#317-323)
dev(address) should be declared external:
	- MISOMasterChef.dev(address) (contracts/Farms/MISOMasterChef.sol#326-329)
setBonus(uint256,uint256) should be declared external:
	- MasterChef.setBonus(uint256,uint256) (contracts/Farms/MasterChef.sol#143-154)
addToken(uint256,IERC20,bool) should be declared external:
	- MasterChef.addToken(uint256,IERC20,bool) (contracts/Farms/MasterChef.sol#162-178)
set(uint256,uint256,bool) should be declared external:
	- MasterChef.set(uint256,uint256,bool) (contracts/Farms/MasterChef.sol#181-191)
deposit(uint256,uint256) should be declared external:
	- MasterChef.deposit(uint256,uint256) (contracts/Farms/MasterChef.sol#250-266)
withdraw(uint256,uint256) should be declared external:
	- MasterChef.withdraw(uint256,uint256) (contracts/Farms/MasterChef.sol#269-284)
emergencyWithdraw(uint256) should be declared external:
	- MasterChef.emergencyWithdraw(uint256) (contracts/Farms/MasterChef.sol#287-295)
blocksRemaining() should be declared external:
	- MasterChef.blocksRemaining() (contracts/Farms/MasterChef.sol#308-315)
claimTips() should be declared external:
	- MasterChef.claimTips() (contracts/Farms/MasterChef.sol#318-324)
dev(address) should be declared external:
	- MasterChef.dev(address) (contracts/Farms/MasterChef.sol#327-330)
initUniswapZAP(address,address,address) should be declared external:
	- LiquidityZAP.initUniswapZAP(address,address,address) (contracts/Liquidity/LiquidityZAP.sol#44-50)
removeAllLiquidityETHOnly(address) should be declared external:
	- LiquidityZAP.removeAllLiquidityETHOnly(address) (contracts/Liquidity/LiquidityZAP.sol#184-187)
removeAllLiquidityTokenOnly(address) should be declared external:
	- LiquidityZAP.removeAllLiquidityTokenOnly(address) (contracts/Liquidity/LiquidityZAP.sol#204-207)
getLPTokenPerEthUnit(uint256) should be declared external:
	- LiquidityZAP.getLPTokenPerEthUnit(uint256) (contracts/Liquidity/LiquidityZAP.sol#211-220)
getLPTokenAddress() should be declared external:
	- PoolLiquidity.getLPTokenAddress() (contracts/Liquidity/PoolLiquidity.sol#192-194)
getLPTokenPerEthUnit(uint256) should be declared external:
	- PoolLiquidity.getLPTokenPerEthUnit(uint256) (contracts/Liquidity/PoolLiquidity.sol#196-205)
setMinimumFee(uint256) should be declared external:
	- MISOFarmFactory.setMinimumFee(uint256) (contracts/MISOFarmFactory.sol#73-79)
setTokenFee(uint256) should be declared external:
	- MISOFarmFactory.setTokenFee(uint256) (contracts/MISOFarmFactory.sol#81-87)
setDividends(address) should be declared external:
	- MISOFarmFactory.setDividends(address) (contracts/MISOFarmFactory.sol#89-95)
getFarmTemplate(uint256) should be declared external:
	- MISOFarmFactory.getFarmTemplate(uint256) (contracts/MISOFarmFactory.sol#174-176)
getTemplateId(address) should be declared external:
	- MISOFarmFactory.getTemplateId(address) (contracts/MISOFarmFactory.sol#179-181)
numberOfFarms() should be declared external:
	- MISOFarmFactory.numberOfFarms() (contracts/MISOFarmFactory.sol#184-186)
getEscrowTemplate(uint256) should be declared external:
	- MISOFermenter.getEscrowTemplate(uint256) (contracts/MISOFermenter.sol#96-98)
numberOfTokens() should be declared external:
	- MISOFermenter.numberOfTokens() (contracts/MISOFermenter.sol#101-103)
getTemplateId(address) should be declared external:
	- MISOFermenter.getTemplateId(address) (contracts/MISOFermenter.sol#105)
getLiquidityLauncherTemplate(uint256) should be declared external:
	- MISOLiquidityLauncher.getLiquidityLauncherTemplate(uint256) (contracts/MISOLiquidityLauncher.sol#106-108)
numberOfLiquidityLauncherContracts() should be declared external:
	- MISOLiquidityLauncher.numberOfLiquidityLauncherContracts() (contracts/MISOLiquidityLauncher.sol#111-113)
getTemplateId(address) should be declared external:
	- MISOLiquidityLauncher.getTemplateId(address) (contracts/MISOLiquidityLauncher.sol#116-122)
setMinimumFee(uint256) should be declared external:
	- MISOMarket.setMinimumFee(uint256) (contracts/MISOMarket.sol#77-83)
setTokenFee(uint256) should be declared external:
	- MISOMarket.setTokenFee(uint256) (contracts/MISOMarket.sol#85-91)
setDividends(address) should be declared external:
	- MISOMarket.setDividends(address) (contracts/MISOMarket.sol#93-99)
getAuctionTemplate(uint256) should be declared external:
	- MISOMarket.getAuctionTemplate(uint256) (contracts/MISOMarket.sol#189-191)
getTemplateId(address) should be declared external:
	- MISOMarket.getTemplateId(address) (contracts/MISOMarket.sol#194-196)
numberOfAuctions() should be declared external:
	- MISOMarket.numberOfAuctions() (contracts/MISOMarket.sol#199-201)
setMinimumFee(uint256) should be declared external:
	- MISOTokenFactory.setMinimumFee(uint256) (contracts/MISOTokenFactory.sol#74-80)
setTokenFee(uint256) should be declared external:
	- MISOTokenFactory.setTokenFee(uint256) (contracts/MISOTokenFactory.sol#82-88)
setDividends(address) should be declared external:
	- MISOTokenFactory.setDividends(address) (contracts/MISOTokenFactory.sol#90-96)
getTokenTemplate(uint256) should be declared external:
	- MISOTokenFactory.getTokenTemplate(uint256) (contracts/MISOTokenFactory.sol#180-182)
numberOfTokens() should be declared external:
	- MISOTokenFactory.numberOfTokens() (contracts/MISOTokenFactory.sol#185-187)
getTemplateId(address) should be declared external:
	- MISOTokenFactory.getTemplateId(address) (contracts/MISOTokenFactory.sol#190-192)
uintToBytes(uint256) should be declared external:
	- SimpleContract.uintToBytes(uint256) (contracts/SimpleConctract.sol#83-85)
addressToBytes(address) should be declared external:
	- SimpleContract.addressToBytes(address) (contracts/SimpleConctract.sol#87-89)
encode(address,uint256) should be declared external:
	- SimpleContract.encode(address,uint256) (contracts/SimpleConctract.sol#95-97)
decode(bytes) should be declared external:
	- SimpleContract.decode(bytes) (contracts/SimpleConctract.sol#99-102)
symbol() should be declared external:
	- ERC20.symbol() (contracts/Tokens/ERC20.sol#78-80)
decimals() should be declared external:
	- ERC20.decimals() (contracts/Tokens/ERC20.sol#95-97)
totalSupply() should be declared external:
	- ERC20.totalSupply() (contracts/Tokens/ERC20.sol#102-104)
transfer(address,uint256) should be declared external:
	- ERC20.transfer(address,uint256) (contracts/Tokens/ERC20.sol#121-124)
approve(address,uint256) should be declared external:
	- ERC20.approve(address,uint256) (contracts/Tokens/ERC20.sol#140-143)
transferFrom(address,address,uint256) should be declared external:
	- ERC20.transferFrom(address,address,uint256) (contracts/Tokens/ERC20.sol#157-161)
increaseAllowance(address,uint256) should be declared external:
	- ERC20.increaseAllowance(address,uint256) (contracts/Tokens/ERC20.sol#175-178)
decreaseAllowance(address,uint256) should be declared external:
	- ERC20.decreaseAllowance(address,uint256) (contracts/Tokens/ERC20.sol#194-197)
burn(uint256) should be declared external:
	- ERC20Burnable.burn(uint256) (contracts/Tokens/ERC20/ERC20Burnable.sol#18-20)
burnFrom(address,uint256) should be declared external:
	- ERC20Burnable.burnFrom(address,uint256) (contracts/Tokens/ERC20/ERC20Burnable.sol#33-38)
initToken(bytes) should be declared external:
	- FixedToken.initToken(bytes) (contracts/Tokens/FixedToken.sol#15-24)
	- MintableToken.initToken(bytes) (contracts/Tokens/MintableToken.sol#21-30)
	- SushiToken.initToken(bytes) (contracts/Tokens/SushiToken.sol#24-33)
mint(address,uint256) should be declared external:
	- MintableToken.mint(address,uint256) (contracts/Tokens/MintableToken.sol#63-66)
pause() should be declared external:
	- MintableToken.pause() (contracts/Tokens/MintableToken.sol#77-80)
unpause() should be declared external:
	- MintableToken.unpause() (contracts/Tokens/MintableToken.sol#91-94)
mint(address,uint256) should be declared external:
	- SushiToken.mint(address,uint256) (contracts/Tokens/SushiToken.sol#57-61)
updateFee(uint256,uint256) should be declared external:
	- POLContract.updateFee(uint256,uint256) (contracts/Unicrypt/POLContract.sol#66-69)
depositTokenMultipleEpochs(address,uint256[],uint256[]) should be declared external:
	- POLContract.depositTokenMultipleEpochs(address,uint256[],uint256[]) (contracts/Unicrypt/POLContract.sol#79-84)
withdrawToken(address,uint256) should be declared external:
	- POLContract.withdrawToken(address,uint256) (contracts/Unicrypt/POLContract.sol#116-124)
getUserTokenInfo(address,address) should be declared external:
	- POLContract.getUserTokenInfo(address,address) (contracts/Unicrypt/POLContract.sol#140-146)
getUserVestingAtIndex(address,address,uint256) should be declared external:
	- POLContract.getUserVestingAtIndex(address,address,uint256) (contracts/Unicrypt/POLContract.sol#148-152)
getTokenReleaseLength(address) should be declared external:
	- POLContract.getTokenReleaseLength(address) (contracts/Unicrypt/POLContract.sol#154-157)
getTokenReleaseAtIndex(address,uint256) should be declared external:
	- POLContract.getTokenReleaseAtIndex(address,uint256) (contracts/Unicrypt/POLContract.sol#159-164)
quote(uint256,uint256,uint256) should be declared external:
	- UniswapV2Router02.quote(uint256,uint256,uint256) (contracts/UniswapV2/UniswapV2Router02.sol#403-405)
getAmountOut(uint256,uint256,uint256) should be declared external:
	- UniswapV2Router02.getAmountOut(uint256,uint256,uint256) (contracts/UniswapV2/UniswapV2Router02.sol#407-415)
getAmountIn(uint256,uint256,uint256) should be declared external:
	- UniswapV2Router02.getAmountIn(uint256,uint256,uint256) (contracts/UniswapV2/UniswapV2Router02.sol#417-425)
getAmountsOut(uint256,address[]) should be declared external:
	- UniswapV2Router02.getAmountsOut(uint256,address[]) (contracts/UniswapV2/UniswapV2Router02.sol#427-435)
getAmountsIn(uint256,address[]) should be declared external:
	- UniswapV2Router02.getAmountsIn(uint256,address[]) (contracts/UniswapV2/UniswapV2Router02.sol#437-445)
transferOwnership(address) should be declared external:
	- Owned.transferOwnership(address) (contracts/Utils/Owned.sol#32-35)
acceptOwnership() should be declared external:
	- Owned.acceptOwnership() (contracts/Utils/Owned.sol#37-42)
setDelay(uint256) should be declared external:
	- Timelock.setDelay(uint256) (contracts/Utils/Timelock.sol#47-54)
acceptAdmin() should be declared external:
	- Timelock.acceptAdmin() (contracts/Utils/Timelock.sol#56-62)
setPendingAdmin(address) should be declared external:
	- Timelock.setPendingAdmin(address) (contracts/Utils/Timelock.sol#64-75)
queueTransaction(address,uint256,string,bytes,uint256) should be declared external:
	- Timelock.queueTransaction(address,uint256,string,bytes,uint256) (contracts/Utils/Timelock.sol#77-86)
cancelTransaction(address,uint256,string,bytes,uint256) should be declared external:
	- Timelock.cancelTransaction(address,uint256,string,bytes,uint256) (contracts/Utils/Timelock.sol#88-95)
executeTransaction(address,uint256,string,bytes,uint256) should be declared external:
	- Timelock.executeTransaction(address,uint256,string,bytes,uint256) (contracts/Utils/Timelock.sol#97-123)
withdraw(uint256) should be declared external:
	- WETH9.withdraw(uint256) (contracts/Utils/WETH9.sol#38-43)
totalSupply() should be declared external:
	- WETH9.totalSupply() (contracts/Utils/WETH9.sol#45-47)
approve(address,uint256) should be declared external:
	- WETH9.approve(address,uint256) (contracts/Utils/WETH9.sol#49-53)
transfer(address,uint256) should be declared external:
	- WETH9.transfer(address,uint256) (contracts/Utils/WETH9.sol#55-57)
initGnosisVault(address,address,address) should be declared external:
	- GnosisSafeFactory.initGnosisVault(address,address,address) (contracts/Vault/GnosisSafeFactory.sol#24-32)
createSafe(address[],uint256,address,bytes,address,address,uint256,address) should be declared external:
	- GnosisSafeFactory.createSafe(address[],uint256,address,bytes,address,address,uint256,address) (contracts/Vault/GnosisSafeFactory.sol#67-89)
lockTokens(address,uint256,uint256) should be declared external:
	- TokenLock.lockTokens(address,uint256,uint256) (contracts/Vault/TokenLock.sol#30-48)
withdrawTokens(uint256) should be declared external:
	- TokenLock.withdrawTokens(uint256) (contracts/Vault/TokenLock.sol#53-77)
getTotalTokenBalance(address) should be declared external:
	- TokenLock.getTotalTokenBalance(address) (contracts/Vault/TokenLock.sol#80-83)
getTokenBalanceByAddress(address,address) should be declared external:
	- TokenLock.getTokenBalanceByAddress(address,address) (contracts/Vault/TokenLock.sol#86-89)
getDepositDetails(uint256) should be declared external:
	- TokenLock.getDepositDetails(uint256) (contracts/Vault/TokenLock.sol#92-96)
initERC20Vault() should be declared external:
	- TokenVault.initERC20Vault() (contracts/Vault/TokenVault.sol#30-32)
add(IERC20,bool,uint256) should be declared external:
	- TokenVault.add(IERC20,bool,uint256) (contracts/Vault/TokenVault.sol#36-51)
setPoolWithdrawable(uint256,bool) should be declared external:
	- TokenVault.setPoolWithdrawable(uint256,bool) (contracts/Vault/TokenVault.sol#54-57)
updatePoolEndDate(uint256,uint256) should be declared external:
	- TokenVault.updatePoolEndDate(uint256,uint256) (contracts/Vault/TokenVault.sol#60-64)
deposit(address,uint256,address) should be declared external:
	- TokenVault.deposit(address,uint256,address) (contracts/Vault/TokenVault.sol#69-77)
withdraw(uint256,uint256) should be declared external:
	- TokenVault.withdraw(uint256,uint256) (contracts/Vault/TokenVault.sol#79-88)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
. analyzed (84 contracts with 72 detectors), 813 result(s) found
Use https://crytic.io/ to get access to additional detectors and Github integration
INFO:Slither:security.json exists already, the overwrite is prevented
